<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Javascript同步与异步问题</title>
    <url>/2021/02/24/Javascript%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>在javascript中大部分程序都是顺序执行的，即只有一个函数执行完后才会，但有时候某些程序运行时间过长，导致之后的程序也不能执行，这就是所谓的阻塞。为了解决这种情况，异步编程就出现了</p>
</blockquote>
<h3 id="同步Javascript"><a href="#同步Javascript" class="headerlink" title="同步Javascript"></a>同步Javascript</h3><p>​    javascript在传统意义上是单线程的，只有通过特殊的工具才能实现多线程操作，因此在任何时候只能做一件事情，只有一个主线程，其他的事情都会被阻塞，直到前面的操作完成</p>
<span id="more"></span>

<p>​    举个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">&#x27;click me&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> pElem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">  	pElem.textContent = <span class="string">&#x27;This is a newly-added paragraph.&#x27;</span>;</span><br><span class="line">  	<span class="built_in">document</span>.body.appendChild(pElem);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>该代码的执行循序是：</p>
<p>​    1.获得DOM中的按钮</p>
<p>​    2.当点击按钮后，添加一个时间监听</p>
<p>​        (1).alert()被执行，消息弹出</p>
<p>​        (2).当alert完全结束后，创建一个<code>&lt;p&gt;</code>标签</p>
<p>​        (3).给<code>&lt;p&gt;</code>标签的文本赋值</p>
<p>​        (4).最后，将该段落方静DOM中</p>
<p>在上述例子中，当点击按钮后不会立即执行创建</p><p>标签的操作，直到alert完全执行完毕才会执行创建操作</p>
<h3 id="异步Javascript"><a href="#异步Javascript" class="headerlink" title="异步Javascript"></a>异步Javascript</h3><p>​    由于种种的原因，目前很多网页API特性使用异步代码，尤其是从外部获取资源的时候。</p>
<p>​    目前异步编程的方法有2中 —老派callback和新派promise</p>
<h4 id="异步callback"><a href="#异步callback" class="headerlink" title="异步callback"></a>异步callback</h4><p>​    异步callback实际上就是一个函数，它的作用是在当作参数传入到其他函数中，当其他函数运行完毕后然后再执行callback函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url,type,callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//请求数据</span></span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">  xhr.responseType = type;</span><br><span class="line">	<span class="comment">//数据请求完毕</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将请求到的参数作为实参传到callback中，然后执行callback函数</span></span><br><span class="line">    callback(xhr.response);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将图片渲染到DOM上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayImage</span>(<span class="params">blob</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> objectURL = URL.createObjectURL(blob);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> image = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">  image.src = objectURL;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(<span class="string">&#x27;coffee.jpg&#x27;</span>, <span class="string">&#x27;blob&#x27;</span>, displayImage);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>​    Promises 是新派的异步代码，现代的web APIs经常用到。<strong>Promise</strong> 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值。当浏览器执行时，会将像promise这些异步操作放进队列中，这样就不会阻止后续的javascript执行，待主线程处理完成后再执行队列中的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//等待返回结果</span></span><br><span class="line">promise1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="comment">// expected output: &quot;foo&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//由于异步执行，该console提前执行</span></span><br><span class="line"><span class="built_in">console</span>.log(promise1);</span><br><span class="line"><span class="comment">// expected output: [object Promise]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后结果</span></span><br><span class="line"><span class="comment">//[object Promise]</span></span><br><span class="line"><span class="comment">//&quot;foo&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="Promises-对比-callbacks"><a href="#Promises-对比-callbacks" class="headerlink" title="Promises 对比 callbacks"></a>Promises 对比 callbacks</h4><p>​    promises与旧式callbacks有一些相似之处。它们本质上是一个返回的对象，您可以将回调函数附加到该对象上，而不必将回调作为参数传递给另一个函数。</p>
<p>​    然而，<code>Promise</code>是专门为异步操作而设计的，与旧式回调相比具有许多优点:</p>
<p>​        1、您可以使用多个then()操作将多个异步操作链接在一起，并将其中一个操作的结果作为输入传递给下一个操作。这对于回调要难得多，回调常常以混乱的“末日金字塔”告终。 (也称为回调地狱)。</p>
<p>​        2、<code>Promise</code>总是严格按照它们放置在事件队列中的顺序调用</p>
<p>​        3、错误处理要好得多——所有的错误都由块末尾的一个.catch()块处理，而不是在“金字塔”的每一层单独处理。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>async/await的基本用法</title>
    <url>/2021/02/24/async-await%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>首先，我们使用<code>async</code>关键字，您可以将它放在函数声明之前，将其转换为async function；</p>
<p><strong>async function</strong>用来定义一个返回AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的Promise 返回其结果。如果你在代码中使用了异步函数，就会发现它的语法和结构会更像是标准的同步函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveAfter2Seconds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;resolved&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncCall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;calling&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">await</span> resolveAfter2Seconds();</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="comment">// expected output: &#x27;resolved&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncCall();</span><br><span class="line"><span class="comment">//calling</span></span><br><span class="line"><span class="comment">//resolved</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">[param[, param[, ... param]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<p>​    name：函数名</p>
<p>​    param：要传递给函数的参数</p>
<p>​    statements：函数体语言</p>
<p>返回值：</p>
<p>​    返回的Promise对象会运行执行(resolve)异步函数的返回结果，或者运行拒绝(reject)——如果异步函数抛出异常的话。</p>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>异步函数可以包含<code>await</code>指令，该指令会暂停异步函数的执行，并等待Promise执行，然后继续执行异步函数，并返回结果。</p>
<p>记住，await 关键字只在异步函数内有效。如果你在异步函数外使用它，会抛出语法错误。</p>
<p>注意，当异步函数暂停时，它调用的函数会继续执行(收到异步函数返回的隐式Promise)</p>
<p>一个详细的示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> resolveAfter2Seconds = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;starting slow promise&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;slow promise is done&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resolveAfter1Second = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;starting fast promise&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;fast promise is done&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sequentialStart = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;==SEQUENTIAL START==&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. Execution gets here almost instantly</span></span><br><span class="line">    <span class="comment">//先创建一个slow的定时器--用了2秒</span></span><br><span class="line">  <span class="keyword">const</span> slow = <span class="keyword">await</span> resolveAfter2Seconds();</span><br><span class="line">  <span class="built_in">console</span>.log(slow); <span class="comment">// 2. this runs 2 seconds after 1.</span></span><br><span class="line">	<span class="comment">//当slow完成后再创建一个fast的定时器 --用了1s</span></span><br><span class="line">  <span class="keyword">const</span> fast = <span class="keyword">await</span> resolveAfter1Second();</span><br><span class="line">  <span class="built_in">console</span>.log(fast); <span class="comment">// 3. this runs 3 seconds after 1.</span></span><br><span class="line">  <span class="comment">//一共花了3秒  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> concurrentStart = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;==CONCURRENT START with await==&#x27;</span>);</span><br><span class="line">    <span class="comment">//开始定义slow的定时器</span></span><br><span class="line">  <span class="keyword">const</span> slow = resolveAfter2Seconds(); <span class="comment">// starts timer immediately</span></span><br><span class="line">    <span class="comment">//开始定义fast的定时器</span></span><br><span class="line">  <span class="keyword">const</span> fast = resolveAfter1Second(); <span class="comment">// starts timer immediately</span></span><br><span class="line"><span class="comment">//由于是同时开始定义定时器的，所以2个定时器是同时开始计时</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 1. Execution gets here almost instantly</span></span><br><span class="line">    <span class="comment">//等待slow定时器返回结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> slow); <span class="comment">// 2. this runs 2 seconds after 1.</span></span><br><span class="line">    <span class="comment">//当slow返回结果后，fast由于已经完成了1s了，所以能立即返回数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> fast); <span class="comment">// 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved</span></span><br><span class="line">    <span class="comment">//该程序只执行了2秒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> concurrentPromise = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;==CONCURRENT START with Promise.all==&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([resolveAfter2Seconds(), resolveAfter1Second()]).then(<span class="function">(<span class="params">messages</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//等待slow的结果返回</span></span><br><span class="line">    <span class="built_in">console</span>.log(messages[<span class="number">0</span>]); <span class="comment">// slow</span></span><br><span class="line">    <span class="built_in">console</span>.log(messages[<span class="number">1</span>]); <span class="comment">// fast</span></span><br><span class="line">  &#125;);</span><br><span class="line">    <span class="comment">//改程序执行了2秒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parallel = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;==PARALLEL with await Promise.all==&#x27;</span>);</span><br><span class="line">  <span class="comment">//同上</span></span><br><span class="line">  <span class="comment">// Start 2 &quot;jobs&quot; in parallel and wait for both of them to complete</span></span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">      (<span class="keyword">async</span>()=&gt;<span class="built_in">console</span>.log(<span class="keyword">await</span> resolveAfter2Seconds()))(),</span><br><span class="line">      (<span class="keyword">async</span>()=&gt;<span class="built_in">console</span>.log(<span class="keyword">await</span> resolveAfter1Second()))()</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function does not handle errors. See warning below!</span></span><br><span class="line"><span class="keyword">var</span> parallelPromise = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;==PARALLEL with Promise.then==&#x27;</span>);</span><br><span class="line">  resolveAfter2Seconds().then(<span class="function">(<span class="params">message</span>)=&gt;</span><span class="built_in">console</span>.log(message));</span><br><span class="line">  resolveAfter1Second().then(<span class="function">(<span class="params">message</span>)=&gt;</span><span class="built_in">console</span>.log(message));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sequentialStart(); <span class="comment">// after 2 seconds, logs &quot;slow&quot;, then after 1 more second, &quot;fast&quot;</span></span><br><span class="line"><span class="comment">//一共花了3秒，</span></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//==SEQUENTIAL START==</span></span><br><span class="line"><span class="comment">//starting slow promise</span></span><br><span class="line"><span class="comment">//slow</span></span><br><span class="line"><span class="comment">//starting fast promise</span></span><br><span class="line"><span class="comment">//fast promise is done</span></span><br><span class="line"><span class="comment">//fast</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wait above to finish</span></span><br><span class="line"><span class="built_in">setTimeout</span>(concurrentStart, <span class="number">4000</span>); <span class="comment">// after 2 seconds, logs &quot;slow&quot; and then &quot;fast&quot;</span></span><br><span class="line"><span class="comment">//一共花了6秒，</span></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//==CONCURRENT START with await==</span></span><br><span class="line"><span class="comment">//starting slow promise</span></span><br><span class="line"><span class="comment">//starting fast promise</span></span><br><span class="line"><span class="comment">//fast promise is done</span></span><br><span class="line"><span class="comment">//slow promise is done</span></span><br><span class="line"><span class="comment">//slow</span></span><br><span class="line"><span class="comment">//fast</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wait again</span></span><br><span class="line"><span class="built_in">setTimeout</span>(concurrentPromise, <span class="number">7000</span>); <span class="comment">// same as concurrentStart</span></span><br><span class="line"><span class="comment">//一共花了9秒</span></span><br><span class="line"><span class="comment">//==CONCURRENT START with Promise.all==</span></span><br><span class="line"><span class="comment">//starting slow promise</span></span><br><span class="line"><span class="comment">//starting fast promise</span></span><br><span class="line"><span class="comment">//fast promise is done</span></span><br><span class="line"><span class="comment">//slow promise is done</span></span><br><span class="line"><span class="comment">//slow</span></span><br><span class="line"><span class="comment">//fast</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wait again</span></span><br><span class="line"><span class="built_in">setTimeout</span>(parallel, <span class="number">10000</span>); <span class="comment">// truly parallel: after 1 second, logs &quot;fast&quot;, then after 1 more second, &quot;slow&quot;</span></span><br><span class="line"><span class="comment">//一共花了12秒</span></span><br><span class="line"><span class="comment">// wait again</span></span><br><span class="line"><span class="built_in">setTimeout</span>(parallelPromise, <span class="number">13000</span>); <span class="comment">// same as parallel</span></span><br></pre></td></tr></table></figure>

<p>使用async函数重写 promise 链</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProcessedData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> downloadData(url) <span class="comment">// 返回一个 promise 对象</span></span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> downloadFallbackData(url)  <span class="comment">// 返回一个 promise 对象</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> processDataInWorker(v); <span class="comment">// 返回一个 promise 对象</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重写成单个asynv函数后</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProcessedData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> v;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    v = <span class="keyword">await</span> downloadData(url); </span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    v = <span class="keyword">await</span> downloadFallbackData(url);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> processDataInWorker(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="async-await的缺陷"><a href="#async-await的缺陷" class="headerlink" title="async/await的缺陷"></a>async/await的缺陷</h3><p>Async / await对于了解非常有用，但还有一些缺点需要考虑。</p>
<p>Async / await使您的代码看起来是同步的，并且在某种程度上它使它的行为更加同步。 <code>await</code>关键字阻止执行所有代码，直到promise完成，就像执行同步操作一样。它允许其他任务在此期间继续运行，但您自己的代码被阻止。</p>
<p>这意味着您的代码可能会因为大量等待的promises相继发生而变慢。每个<code>await</code>将等待前一个完成，而实际上你想要的是promises同时开始处理（就像我们没有使用async / await时那样）。</p>
<p>有一种模式可以缓解这个问题 ––通过关闭所有promise进程将<code>Promise</code>对象存储在变量中，然后等待触发它们。让我们看一些证明这个概念的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeoutPromise</span>(<span class="params">interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      resolve(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//比较耗时的方法 按累计来算，估计要花费9s来执行</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise1 = timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise2 = timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise3 = timeoutPromise(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> timeoutPromise1;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise2;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，我们将三个Promise对象存储在变量中，这样可以同时启动它们关联的进程</p>
<p>接下来，我们等待他们的结果 - 因为promise都在基本上同时开始处理，promise将同时完成;当您运行第二个示例时，您将看到警报框报告总运行时间超过3秒！</p>
<p>您必须仔细测试您的代码，并在性能开始受损时牢记这一点</p>
<p>原文来源：<a href="%5Bhttps://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5/Async_await%5D(https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5/Async_await)">async和await:让异步编程更简单</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>git-分支操作</title>
    <url>/2021/03/02/git-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>
<p><img src="/2021/03/02/git-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/1.png"></p>
<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p>
<span id="more"></span>

<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<p><img src="/2021/03/02/git-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/2.png"></p>
<p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>
<p><img src="/2021/03/02/git-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/3.png"></p>
<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p>
<p><img src="/2021/03/02/git-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/4.png"></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>
<p><img src="/2021/03/02/git-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/5.png"></p>
<p>实现代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line"><span class="comment">//代码中的-b是指常见一个分支，相当于下属2行代码</span></span><br><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//关键--合并分支</span></span><br><span class="line">git merge dev</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除分支</span></span><br><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Git鼓励大量使用分支：</p>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch </code></p>
<p>切换分支：<code>git checkout </code>或者<code>git switch </code></p>
<p>创建+切换分支：<code>git checkout -b </code>或者<code>git switch -c </code></p>
<p>合并某分支到当前分支：<code>git merge </code></p>
<p>删除分支：<code>git branch -d </code></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-BUG分支</title>
    <url>/2021/03/02/git-BUG%E5%88%86%E6%94%AF/</url>
    <content><![CDATA[<h1 id="BUG分支"><a href="#BUG分支" class="headerlink" title="BUG分支"></a>BUG分支</h1><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>
<p>当开发过程中接到一个紧急bug，但是当前开发的分支内容并未写好，不能上传，幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p>
<p>当bug修复后就可以切回去原来的分支进行工作了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git switch dev</span><br><span class="line">Switched to branch &#39;dev&#39;</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>

<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>
<p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p>
<p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Dropped refs&#x2F;stash@&#123;0&#125; (5d677e2ee266f39ea296182fb2354265b91b3b2a)</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>
<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p>
<p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick </code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-工作区和暂存区</title>
    <url>/2021/03/02/git-%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA/</url>
    <content><![CDATA[<h4 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h4><p>工作区就是能看到的目录</p>
<p><img src="/2021/03/02/git-%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA/image-20200421161510758.png"></p>
<p>就是这个python文件夹</p>
<span id="more"></span>

<h4 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h4><p>工作区有一个隐藏目录<code>.git</code>，这个是Git的版本库</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>
<p><img src="/2021/03/02/git-%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA/0.jpg"></p>
<p>当我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步：用<code>git add </code>把文件添加进去，实际上就是把文件修改添加到暂存区</p>
<p>第二步：用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支中</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-库操作</title>
    <url>/2021/03/02/git-%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>通过<strong>git init</strong>命令把目录变成Git可以管理的创库</p>
<p><img src="/2021/03/02/git-%E5%BA%93%E6%93%8D%E4%BD%9C/image-20200421141058285.png" alt="库初始化"></p>
<p><strong>.git</strong> 目录，这目录是默认隐藏的，可以通过显示隐藏文件来查看**.git**</p>
<span id="more"></span>

<h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><p>第一步，用命令<strong>git add</strong>把文件添加到仓库中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add 文件名字</span><br></pre></td></tr></table></figure>

<p>当执行上面的命令，若没有任何显示就证明添加成功</p>
<p>第二部，用命令<strong>git commit</strong>告诉Git，把文件提交到仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m&#39;注释内容&#39;</span><br></pre></td></tr></table></figure>

<p><code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样就能从历史记录里方便地找到改动记录</p>
<p><img src="/2021/03/02/git-%E5%BA%93%E6%93%8D%E4%BD%9C/image-20200421150400589.png" alt="提交到库"></p>
<p>小结：</p>
<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<ol>
<li>使用命令<code>git add &lt;file&gt; </code> ，注意，可反复多次使用，添加多个文件；</li>
<li>使用命令<code>git commit -m&lt;message&gt; </code>，完成。</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-查看文件状态</title>
    <url>/2021/03/02/git-%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p>运行<code>git status</code>命令看看结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交的修改。</p>
<p>通过<code>git diff</code>查看上次的修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a&#x2F;readme.txt b&#x2F;readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a&#x2F;readme.txt</span><br><span class="line">+++ b&#x2F;readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system.</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line"> Git is free software.</span><br></pre></td></tr></table></figure>



<p>小结：</p>
<ul>
<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>
<li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-版本回退</title>
    <url>/2021/03/02/git-%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</url>
    <content><![CDATA[<p>当多次提交提交的时候，当发现提交错误时，需要版本回退</p>
<p>当然了，在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用<code>git log</code>命令查看：</p>
<p><img src="/2021/03/02/git-%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/image-20200421152956511.png" alt="image-20200421152956511"></p>
<span id="more"></span>

<p><code>git log</code>命令显示从最近到最远的提交日志，我们可以看到3次提交</p>
<p>最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次是<code>wrote a readme file</code></p>
<p>若是嫌弃输出信息太多后，可以加上<code>--pretty=oneline</code>参数：</p>
<p><img src="/2021/03/02/git-%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/image-20200421153416597.png" alt="image-20200421153416597"></p>
<p>上述的一串类似<code>68ff863d</code>的是commit 的版本号，通过版本号可以得知是哪一个版本</p>
<p>当知道版本后，可以通过reset来实现版本回退</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure>

<p><code>HEAD</code>代表的是当前版本，^代表的是上一个版本</p>
<p>当然也可以通过版本号来实现版本回退</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure>

<p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   └──&gt; ○ append GPL</span><br><span class="line">        │</span><br><span class="line">        ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure>

<p>改为指向<code>add distributed</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   │    ○ append GPL</span><br><span class="line">   │    │</span><br><span class="line">   └──&gt; ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure>

<p>小结</p>
<ul>
<li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<p>原文链接：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000">Git简介</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-解决冲突</title>
    <url>/2021/03/02/git-%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<p>当我们在不同分支修改同一个文件的相同部位内容的时候，当分支进行合并的时候，就会产生冲突，就像这样</p>
<p><img src="/2021/03/02/git-%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/6.png"></p>
<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。</p>
<span id="more"></span>

<p><code>git status</code>可以告诉我们冲突的文件</p>
<p>当将冲突的内容修正后，再提交代码</p>
<p><img src="/2021/03/02/git-%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/7.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cl3搭建项目</title>
    <url>/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h2><ol>
<li><p>npm更新到最新</p>
</li>
<li><p>node &gt;=8.9 版本</p>
</li>
<li><p>全局安装了vue-cli</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -g @vue/cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装了vue</p>
</li>
</ol>
<span id="more"></span>

<h2 id="创建项目步骤"><a href="#创建项目步骤" class="headerlink" title="创建项目步骤"></a>创建项目步骤</h2><p>1.在新建的文件夹下创建项目 vue create my-project</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527162513494.png"></p>
<p>指向的是ssr是因为上次配置过的cli3的配置，第一次执行create是没有的</p>
<p>通过键盘上下键可以切换选项，也可以选默认(default)，也可以选择手动(Manally),如果选择default，那个一直回车就好了</p>
<p>当然了需求不同，往往需要手动配置</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527163003709.png"></p>
<p>2.手动配置的配置信息</p>
<p>按照个人项目需求，选择需要的配置</p>
<p>注意，空格是选中和取消，A键是全选</p>
<p>TypeScript 支持使用 TypeScript 书写源码</p>
<p> Progressive Web App (PWA) Support PWA 支持。</p>
<p> Router 支持 vue-router 。</p>
<p>Vuex 支持 vuex 。</p>
<p>CSS Pre-processors 支持 CSS 预处理器。</p>
<p> Linter / Formatter 支持代码风格检查和格式化。</p>
<p> Unit Testing 支持单元测试。</p>
<p> E2E Testing 支持 E2E 测试。</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527163437407.png"></p>
<p>以上是我搭建Vue项目的配置信息</p>
<p>3.当选了Router后会询问是否采用history，当然基本都是用的</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527163625559.png"></p>
<p>4.css的预处理</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527163730822.png"></p>
<p>我选了Sass</p>
<p>5.我选择的是ESLint + Prettier</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527163943737.png"></p>
<p>6.选择语法检查方式</p>
<p>我自己选择保存就检测<br>第一个是保存检测，第二个是fix和commit的时候检测</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527164041148.png"></p>
<p>7.单元测试，我选择了Mocha</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527164238990.png"></p>
<p>8.配置文件存放地方<br>第一个是独立文件夹位置，第二个是在package.json文件里</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527164307971.png"></p>
<p>9.询问是否记录这一次的配置，以便下次使用，如一开始的时候会显示的vuecli3配置</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527164327651.png"></p>
<p>10.回车确定等待下载</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527164349916.png"></p>
<p>11.下载后就可以启动和编写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd my-project</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527164556028.png"></p>
<p>12.vue-cli3.0的目录结构相比2.0而言要简介许多，没有了build和config等文件，当需要其他配置的时候需要自己去配置，比如说webpack配置</p>
<p><img src="/2021/02/25/vue-cl3%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20200527164806424.png"></p>
<p>原文来自：<a href="https://www.jianshu.com/p/5e13bc2eb97c">vue-cli3快速创建项目</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-config-js配置参考</title>
    <url>/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<blockquote>
<p><strong>vue-cli3 脚手架搭建完成后，项目目录中没有 vue.config.js 文件，需要手动创建</strong></p>
</blockquote>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527164806424.png"></p>
<h2 id="创建vue-config-js"><a href="#创建vue-config-js" class="headerlink" title="创建vue.config.js"></a>创建vue.config.js</h2><p>vue.config.js 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载。你也可以使用 package.json 中的 vue 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p>
<span id="more"></span>

<p>在根目录中创建 <strong>vue.config.js</strong></p>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527165215304.png" alt="vue.config.js位置"></p>
<h2 id="vue-config-js配置"><a href="#vue-config-js配置" class="headerlink" title="vue.config.js配置"></a><strong>vue.config.js配置</strong></h2><p>这个文件应该导出一个包含了选项的对象：</p>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527170610550.png" alt="导出配置"></p>
<h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a><strong>配置选项</strong></h3><h4 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath"></a><strong>publicPath</strong></h4><blockquote>
<p>Type: string</p>
<p>Default: ‘/‘</p>
<p>部署应用包时的基本 URL， 用法和 webpack 本身的 output.publicPath 一致。</p>
<p>这个值也可以被设置为空字符串 (‘’) 或是相对路径 (‘./‘)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径。</p>
</blockquote>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527170802288.png" alt="基本路径"></p>
<p>把开发服务器架设在根路径，可以使用一个条件式的值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//选项</span></span><br><span class="line">    <span class="comment">//基本路径</span></span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/production-sub-path&#x27;</span> : <span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="outputDir"><a href="#outputDir" class="headerlink" title="outputDir"></a><strong>outputDir</strong></h4><blockquote>
<p>Type: string</p>
<p>Default: ‘dist’</p>
<p>输出文件目录，当运行 vue-cli-service build 时生成的生产环境构建文件的目录。注意目标目录在构建之前会被清除 (构建时传入 –no-clean 可关闭该行为)。</p>
</blockquote>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527171222480.png" alt="输出目录"></p>
<h4 id="assetsDir"><a href="#assetsDir" class="headerlink" title="assetsDir"></a><strong>assetsDir</strong></h4><blockquote>
<p>Type: string</p>
<p>Default: ‘’</p>
<p>放置生成的静态资源 (js、css、img、fonts) 的目录。</p>
</blockquote>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527172555291.png" alt="静态资源"></p>
<p><strong>注：</strong>从生成的资源覆写 filename 或 chunkFilename 时，assetsDir 会被忽略。</p>
<h4 id="indexPath"><a href="#indexPath" class="headerlink" title="indexPath"></a><strong>indexPath</strong></h4><blockquote>
<p>Type: string</p>
<p>Default: ‘index.html’</p>
<p>指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。</p>
</blockquote>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527172607195.png" alt="输出路径"></p>
<h4 id="filenameHashing"><a href="#filenameHashing" class="headerlink" title="filenameHashing"></a><strong>filenameHashing</strong></h4><p>Type: boolean</p>
<p>Default: true</p>
<p>默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。然而，这也要求 index 的 HTML 是被 Vue CLI 自动生成的。如果你无法使用 Vue CLI 生成的 index HTML，你可以通过将这个选项设为 false 来关闭文件名哈希。</p>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527172715959.png" alt="文件名哈希"></p>
<h4 id="pages"><a href="#pages" class="headerlink" title="pages"></a><strong>pages</strong></h4><blockquote>
<p>Type: Object</p>
<p>Default: undefined</p>
<p>在 multi-page（多页）模式下构建应用。每个“page”应该有一个对应的 JavaScript 入口文件。</p>
</blockquote>
<p>其值应该是一个对象，对象的 key 是入口的名字，value 是：一个指定了 entry, template, filename, title 和 chunks 的对象 (除了 entry 之外都是可选的)，或一个指定其 entry 的字符串。</p>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527172646321.png" alt="输出文件"></p>
<p><strong>注：</strong>当在 多页应用 模式下构建时，webpack 配置会包含不一样的插件 (这时会存在多个 html-webpack-plugin 和 preload-webpack-plugin 的实例)。如果你试图修改这些插件的选项，请确认运行 vue inspect。</p>
<h4 id="lintOnSave"><a href="#lintOnSave" class="headerlink" title="lintOnSave"></a><strong>lintOnSave</strong></h4><blockquote>
<p>Type: boolean | ‘error’</p>
<p>Default: true</p>
<p>是否在保存的时候使用 <code>eslint-loader</code> 进行检查。 有效的值：<code>ture</code> | <code>false</code> | <code>&quot;error&quot;</code> 当设置为 <code>&quot;error&quot;</code> 时，检查出的错误会触发编译失败。</p>
</blockquote>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527173136735.png" alt="eslint检测"></p>
<h4 id="runtimeCompiler"><a href="#runtimeCompiler" class="headerlink" title="runtimeCompiler"></a><strong>runtimeCompiler</strong></h4><blockquote>
<p>Type: boolean</p>
<p>Default: false</p>
<p>是否使用包含运行时编译器的 Vue 构建版本。设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。</p>
</blockquote>
<p><img src="/2021/03/01/vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527173147705.png" alt="构建模板"></p>
<h4 id="transpileDependencies"><a href="#transpileDependencies" class="headerlink" title="transpileDependencies"></a><strong>transpileDependencies</strong></h4><blockquote>
<p>Type: Array&lt;string | RegExp&gt;</p>
<p>Default: []</p>
<p>默认情况下 babel-loader 会忽略所有 node_modules 中的文件。如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来。</p>
</blockquote>
<h4 id="productionSourceMap"><a href="#productionSourceMap" class="headerlink" title="productionSourceMap"></a><strong>productionSourceMap</strong></h4><blockquote>
<p>Type: boolean</p>
<p>Default: true</p>
<p>如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。</p>
</blockquote>
<h4 id="crossorigin"><a href="#crossorigin" class="headerlink" title="crossorigin"></a><strong>crossorigin</strong></h4><blockquote>
<p>Type: string</p>
<p>Default: undefined</p>
<p>设置生成的 HTML 中 <link rel="stylesheet"> 和 <script> 标签的 crossorigin 属性。</p>
</blockquote>
<h4 id="integrity"><a href="#integrity" class="headerlink" title="integrity"></a><strong>integrity</strong></h4><blockquote>
<p>Type: boolean</p>
<p>Default: false</p>
<p>在生成的 HTML 中的 <link rel="stylesheet"> 和 <script> 标签上启用 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity">Subresource Integrity</a> (SRI)。如果你构建后的文件是部署在 CDN 上的，启用该选项可以提供额外的安全性。</p>
</blockquote>
<h3 id="Webpack相关配置"><a href="#Webpack相关配置" class="headerlink" title="Webpack相关配置"></a><strong>Webpack相关配置</strong></h3><h4 id="configureWebpack"><a href="#configureWebpack" class="headerlink" title="configureWebpack"></a><strong>configureWebpack</strong></h4><blockquote>
<p>Type: Object | Function</p>
<p>如果这个值是一个对象，则会通过 <a href="https://links.jianshu.com/go?to=https://github.com/survivejs/webpack-merge">webpack-merge</a> 合并到最终的配置中。</p>
<p>如果这个值是一个函数，则会接收被解析的配置作为参数。该函数及可以修改配置并不返回任何东西，也可以返回一个被克隆或合并过的配置版本。</p>
</blockquote>
<h4 id="chainWebpack"><a href="#chainWebpack" class="headerlink" title="chainWebpack"></a><strong>chainWebpack</strong></h4><blockquote>
<p>Type: Function</p>
<p>是一个函数，会接收一个基于 <a href="https://links.jianshu.com/go?to=https://github.com/mozilla-neutrino/webpack-chain">webpack-chain</a> 的 ChainableConfig 实例。允许对内部的 webpack 配置进行更细粒度的修改。</p>
</blockquote>
<h3 id="Css相关配置"><a href="#Css相关配置" class="headerlink" title="Css相关配置"></a><strong>Css相关配置</strong></h3><p><img src="vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/cssperizhi.webp" alt="css配置"></p>
<h4 id="css-modules"><a href="#css-modules" class="headerlink" title="css.modules"></a><strong>css.modules</strong></h4><blockquote>
<p>Type: boolean</p>
<p>Default: false</p>
<p>默认情况下，只有 *.module.[ext] 结尾的文件才会被视作 CSS Modules 模块。设置为 true 后你就可以去掉文件名中的 .module 并将所有的 *.(css|scss|sass|less|styl(us)?) 文件视为 CSS Modules 模块。</p>
</blockquote>
<h4 id="css-extract"><a href="#css-extract" class="headerlink" title="css.extract"></a><strong>css.extract</strong></h4><blockquote>
<p>Type: boolean | Object</p>
<p>Default: 生产环境下是 true，开发环境下是 false</p>
<p>是否将组件中的 CSS 提取至一个独立的 CSS 文件中 (而不是动态注入到 JavaScript 中的 inline 代码)。</p>
</blockquote>
<h4 id="css-sourceMap"><a href="#css-sourceMap" class="headerlink" title="css.sourceMap"></a><strong>css.sourceMap</strong></h4><blockquote>
<p>Type: boolean</p>
<p>Default: false</p>
<p>是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能。</p>
</blockquote>
<h4 id="css-loaderOptions"><a href="#css-loaderOptions" class="headerlink" title="css.loaderOptions"></a><strong>css.loaderOptions</strong></h4><blockquote>
<p>Type: Object</p>
<p>Default: {}</p>
<p>向 CSS 相关的 loader 传递选项。</p>
</blockquote>
<p>支持的 loader 有：</p>
<blockquote>
<p><a href="https://links.jianshu.com/go?to=https://github.com/webpack-contrib/css-loader">css-loader</a></p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/postcss/postcss-loader">postcss-loader</a></p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/webpack-contrib/sass-loader">sass-loader</a></p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/webpack-contrib/less-loader">less-loader</a></p>
<p><a href="https://links.jianshu.com/go?to=https://github.com/shama/stylus-loader">stylus-loader</a></p>
</blockquote>
<p><strong>parallel</strong></p>
<blockquote>
<p>Type: boolean</p>
<p>Default: require(‘os’).cpus().length &gt; 1</p>
<p>是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。</p>
</blockquote>
<p>pwa</p>
<blockquote>
<p>Type: Object</p>
<p>向 <a href="https://links.jianshu.com/go?to=https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-pwa">PWA 插件</a>传递选项。</p>
</blockquote>
<p><strong>pluginOptions</strong></p>
<blockquote>
<p>Type: Object</p>
<p>这是一个不进行任何 schema 验证的对象，因此它可以用来传递任何第三方插件选项。</p>
</blockquote>
<h3 id="配置webpack-dev-server"><a href="#配置webpack-dev-server" class="headerlink" title="配置webpack-dev-server"></a>配置webpack-dev-server</h3><h4 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a><strong>devServer</strong></h4><blockquote>
<p>Type: Object</p>
<p><a href="https://links.jianshu.com/go?to=https://webpack.js.org/configuration/dev-server/">所有 webpack-dev-server 的选项</a>都支持。注意：</p>
<p>有些值像 host、port 和 https 可能会被命令行参数覆写。</p>
<p>有些值像 publicPath 和 historyApiFallback 不应该被修改，因为它们需要和开发服务器的 <a href="https://links.jianshu.com/go?to=https://cli.vuejs.org/zh/config/%23baseurl">publicPath</a> 同步以保障正常的工作。</p>
</blockquote>
<h4 id="devServer-proxy"><a href="#devServer-proxy" class="headerlink" title="devServer.proxy"></a><strong>devServer.proxy</strong></h4><blockquote>
<p>Type: string | Object</p>
<p>如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 vue.config.js 中的 devServer.proxy 选项来配置。</p>
</blockquote>
<p><img src="vue-config-js%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/image-20200527175340086.png" alt="重定向路径配置"></p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//选项</span></span><br><span class="line">    <span class="comment">//基本路径</span></span><br><span class="line">    publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="comment">//构建式的输出目录</span></span><br><span class="line">    outputDir: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    <span class="comment">//放置静态资源的目录</span></span><br><span class="line">    assetsDir: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">    <span class="comment">//html的输出路径</span></span><br><span class="line">    indexPath: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">//文件名哈希</span></span><br><span class="line">    filenameHashing: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//用于配置多页面配置，默认是undefined</span></span><br><span class="line">    pages: &#123;</span><br><span class="line">        index: &#123;</span><br><span class="line">            <span class="comment">//page的入口文件</span></span><br><span class="line">            entry: <span class="string">&#x27;src/index/main.js&#x27;</span>,</span><br><span class="line">            <span class="comment">//模板文件</span></span><br><span class="line">            template: <span class="string">&#x27;public/index.html&#x27;</span>,</span><br><span class="line">            <span class="comment">//dist/index.html的输出文件</span></span><br><span class="line">            filename: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">            <span class="comment">//当使用页面 title选项时</span></span><br><span class="line">            <span class="comment">//template中的title标签需要时&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title%&gt;&lt;/title&gt;</span></span><br><span class="line">            title: <span class="string">&#x27;Index Page&#x27;</span>,</span><br><span class="line">            <span class="comment">//在这个页面中包含的块，默认情况下会包含</span></span><br><span class="line">            <span class="comment">//提取出来的通用chunk和vendorchunk</span></span><br><span class="line">            chunks: [<span class="string">&#x27;chunk-vendors&#x27;</span>, <span class="string">&#x27;chunk-common&#x27;</span>, <span class="string">&#x27;index&#x27;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//当使用只有入口的字符串格式时</span></span><br><span class="line">        <span class="comment">//模板文件默认是`public/subpage.html`</span></span><br><span class="line">        <span class="comment">//如果不存在，就回退到&#x27;public/index.html&#x27;</span></span><br><span class="line">        <span class="comment">//输出文件默认是`subpage.html`</span></span><br><span class="line">        subpage: <span class="string">&#x27;src/subpage/main.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//是否在保存的时候使用&#x27;eslint-loader&#x27; 进行检查</span></span><br><span class="line">    lintOneSave: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//是否使用带有浏览器内编译器的完整构建版本</span></span><br><span class="line">    runtimeCompiler: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//配置路由</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: process.platform === <span class="string">&#x27;darwin&#x27;</span>,</span><br><span class="line">        host: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        port: <span class="number">8080</span>,</span><br><span class="line">        https: <span class="literal">false</span>,</span><br><span class="line">        hotOnly: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//配置代理</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                target: <span class="string">&#x27;http:www.mirenol.com&#x27;</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                secure: <span class="literal">false</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;/foo&#x27;</span>: &#123;</span><br><span class="line">                target: <span class="string">&#x27;&lt;other_url&gt;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        before: <span class="function"><span class="params">app</span> =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>原文链接：<a href="https://www.jianshu.com/p/b358a91bdf2d">vue.config.js 配置</a> </p>
</script></p></blockquote>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3.0知识点</title>
    <url>/2021/03/02/vue3-0%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="1-手脚架"><a href="#1-手脚架" class="headerlink" title="1.手脚架"></a>1.手脚架</h2><h3 id="1-1-Vite"><a href="#1-1-Vite" class="headerlink" title="1.1 Vite"></a>1.1 Vite</h3><p>​        Vite 是一个固执的 web 开发构建工具，在开发过程中通过本地 ES Module 导入为代码提供服务，并将其与 Rollup 捆绑在一起用于生产。</p>
<p>优点：</p>
<ul>
<li>闪电般快速冷启动服务器</li>
<li>即时热模块更换(HMR)</li>
<li>真正的按需编译</li>
</ul>
<p>运行代码如下（必须安装node.js） –尤大大推荐</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm init vite-app &lt;project-name&gt;</span><br><span class="line">$ cd &lt;project-name&gt;</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="1-2-vue-cli"><a href="#1-2-vue-cli" class="headerlink" title="1.2 vue-cli"></a>1.2 vue-cli</h3><p>经典的vue手脚架，目前vite还是开发测试过程中，因此我还是使用vue-cli创建项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli # OR yarn global add @vue&#x2F;cli</span><br><span class="line">vue create hello-vue3</span><br></pre></td></tr></table></figure>

<p>开始</p>
<p><img src="/2021/03/02/vue3-0%E7%9F%A5%E8%AF%86%E7%82%B9/image-20201203111351386.png"></p>
<p>先择自选模板</p>
<p><img src="/2021/03/02/vue3-0%E7%9F%A5%E8%AF%86%E7%82%B9/image-20201203111457267.png"></p>
<p>由于vue3.0兼容了typescript,同时vue3.0已经用Typescript编写了，那么这么好的东西怎么能不用呢？</p>
<p>选择vue3.0 的项目创建方式</p>
<p><img src="/2021/03/02/vue3-0%E7%9F%A5%E8%AF%86%E7%82%B9/image-20201203111651972.png"></p>
<p>嗯，这样就ok了，剩下的和vue2.0的步骤是一样的</p>
<p>直接yes就行也可以</p>
<p>创建后的目录</p>
<p><img src="/2021/03/02/vue3-0%E7%9F%A5%E8%AF%86%E7%82%B9/image-20201203112856413.png"></p>
<p>接下来就是相关知识点了</p>
<h2 id="2-vue3-0知识点"><a href="#2-vue3-0知识点" class="headerlink" title="2.vue3.0知识点"></a>2.vue3.0知识点</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>​    关键中的关键，vue3.0使用setup整合了所有的api。同时在只执行一次，并且是在生命周期函数执行开始之前执行，因此在setup上是不能访问this的。</p>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//定义变量 --ref稍后再说</span></span><br><span class="line">      <span class="keyword">const</span> str = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      <span class="keyword">let</span> fn = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">666</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="comment">//返回出去使用的参数</span></span><br><span class="line">        str,</span><br><span class="line">        fn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ol>
<li>props</li>
<li>context</li>
</ol>
<h5 id="props"><a href="#props" class="headerlink" title="props"></a><code>props</code></h5><p>​    <code>setup</code> 函数中的第一个参数是 <code>props</code>。正如在一个标准组件中所期望的那样，<code>setup</code> 函数中的 <code>props</code> 是响应式的，当传入新的 prop 时，它将被更新。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">      <span class="comment">//因为 props 是响应式的，你不能使用 ES6 解构，因为它会消除 prop 的响应性。</span></span><br><span class="line">    <span class="built_in">console</span>.log(props.title)</span><br><span class="line">      <span class="comment">//要想结构prop就需要使用toRefs来实现</span></span><br><span class="line">      <span class="keyword">const</span>  &#123;title&#125; = toRefs(props)</span><br><span class="line">      <span class="built_in">console</span>.log(title.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="context"><a href="#context" class="headerlink" title="context"></a><code>context</code></h5><p>传递给 <code>setup</code> 函数的第二个参数是 <code>context</code>。<code>context</code> 是一个普通的 JavaScript 对象，它暴露三个组件的 property：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Attribute (非响应式对象)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.attrs)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插槽 (非响应式对象)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.slots)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件 (方法)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.emit)</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它不是响应式的，这意味着你可以安全地对 context 使用 ES6 解构。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ref、reactive"><a href="#ref、reactive" class="headerlink" title="ref、reactive"></a>ref、reactive</h3><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a><code>ref</code></h4><p>接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象具有指向内部值的单个 property <code>.value</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">count.value++</span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//在使用了typescript后，我们可以给数据进行类型声明了</span></span><br><span class="line"><span class="keyword">interface</span> checkNumber&#123;</span><br><span class="line">    id:numner,</span><br><span class="line">    name?:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">let</span> user = ref&lt;checkNumber&gt;(&#123;</span><br><span class="line">     id:<span class="number">0</span>,</span><br><span class="line">     name:<span class="string">&#x27;666&#x27;</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">//或则</span></span><br><span class="line"> <span class="keyword">const</span> foo = ref&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;(<span class="string">&#x27;foo&#x27;</span>) </span><br></pre></td></tr></table></figure>

<h4 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a><code>reactive</code></h4><p>返回对象的响应式副本，对复杂数据进行响应式处理，它的返回值是一个 proxy 对象，在 setup 函数中返回时，可以用 toRefs 对 proxy 对象进行结构，方便在 template 中使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> obj = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line">      obj.count.value = <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span>&#123;</span><br><span class="line">        obj:toRefs(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a><code>toRefs</code></h4><p>将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的ref</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stateAsRefs = toRefs(state)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Type of stateAsRefs:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  foo: Ref&lt;number&gt;,</span></span><br><span class="line"><span class="comment">  bar: Ref&lt;number&gt;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ref 和 原始property “链接”</span></span><br><span class="line">state.foo++</span><br><span class="line"><span class="built_in">console</span>.log(stateAsRefs.foo.value) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//便于使用</span></span><br><span class="line">stateAsRefs.foo.value++</span><br><span class="line"><span class="built_in">console</span>.log(state.foo) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>



<h3 id="watch-响应式更改"><a href="#watch-响应式更改" class="headerlink" title="watch 响应式更改"></a><code>watch</code> 响应式更改</h3><p>监听函数</p>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul>
<li>一个<strong>响应式引用</strong>或我们想要侦听的 getter 函数</li>
<li>一个回调</li>
<li>可选的配置选项</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = ref(<span class="number">0</span>)</span><br><span class="line">watch(counter, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//回掉</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;The new counter value is: &#x27;</span> + counter.value)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="comment">//可选的配置选项</span></span><br><span class="line">    deep:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="computed-属性"><a href="#computed-属性" class="headerlink" title="computed 属性"></a><code>computed</code> 属性</h3><p>与 <code>ref</code> 和 <code>watch</code> 类似，也可以使用从 Vue 导入的 <code>computed</code> 函数在 Vue 组件外部创建计算属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = ref(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> twiceTheCounter = computed(<span class="function">() =&gt;</span> counter.value * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">counter.value++</span><br><span class="line"><span class="built_in">console</span>.log(counter.value) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(twiceTheCounter.value) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>



<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><table>
<thead>
<tr>
<th>选项式 API</th>
<th>Hook inside <code>setup</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>beforeCreate</code></td>
<td>Not needed*</td>
</tr>
<tr>
<td><code>created</code></td>
<td>Not needed*</td>
</tr>
<tr>
<td><code>beforeMount</code></td>
<td><code>onBeforeMount</code></td>
</tr>
<tr>
<td><code>mounted</code></td>
<td><code>onMounted</code></td>
</tr>
<tr>
<td><code>beforeUpdate</code></td>
<td><code>onBeforeUpdate</code></td>
</tr>
<tr>
<td><code>updated</code></td>
<td><code>onUpdated</code></td>
</tr>
<tr>
<td><code>beforeUnmount</code></td>
<td><code>onBeforeUnmount</code></td>
</tr>
<tr>
<td><code>unmounted</code></td>
<td><code>onUnmounted</code></td>
</tr>
<tr>
<td><code>errorCaptured</code></td>
<td><code>onErrorCaptured</code></td>
</tr>
<tr>
<td><code>renderTracked</code></td>
<td><code>onRenderTracked</code></td>
</tr>
<tr>
<td><code>renderTriggered</code></td>
<td><code>onRenderTriggered</code></td>
</tr>
</tbody></table>
<p>因为 <code>setup</code> 是围绕 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 <code>setup</code> 函数中编写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="comment">//beforeMount</span></span><br><span class="line">     onBeforeMount(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">//挂载前</span></span><br><span class="line">     &#125;)</span><br><span class="line">    <span class="comment">// mounted</span></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//挂载后</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Component is mounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">     <span class="comment">//beforeUpdate</span></span><br><span class="line">    onBeforeUpdate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//更新前</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//updated</span></span><br><span class="line">    onUpdated(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//更新后</span></span><br><span class="line">    &#125;)</span><br><span class="line">      <span class="comment">//beforeUnmount</span></span><br><span class="line">     onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//。。。。</span></span><br><span class="line">    &#125;) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><p>将组件挂载到其他地方上，比如有2个组件A，B,在A上有个模块可以通过使用Teleport将其挂载到B组件上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;GlobalHeader :user&#x3D;&quot;user&quot; &#x2F;&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;teleport to&#x3D;&quot;#box&quot;&gt; &lt;GlobalHeader :user&#x3D;&quot;user&quot; &#x2F;&gt;&lt;&#x2F;teleport&gt;</span><br><span class="line">    &lt;!-- &lt;ColumnList :list&#x3D;&quot;list&quot; &#x2F;&gt; --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;!-- &lt;login &#x2F;&gt; --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>同样的一个子组件 GlobalHeader,但是一个使用了Teleport功能后，在不同的位置渲染出来了</p>
<p><img src="/2021/03/02/vue3-0%E7%9F%A5%E8%AF%86%E7%82%B9/image-20201203170722282.png"></p>
<p>Teleport 提供了一种干净的方法，允许我们控制在 DOM 中哪个父节点下呈现 HTML，而不必求助于全局状态或将其拆分为两个组件。</p>
<h2 id="3-vuex知识点变迁"><a href="#3-vuex知识点变迁" class="headerlink" title="3.vuex知识点变迁"></a>3.vuex知识点变迁</h2><p>使用 useStore 来获取 store 对象 从 vuex 中取值时，要注意必须使用 computed 进行包装，这样 vuex 中状态修改后才能在页面中响应</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//创建vuex</span></span><br><span class="line"><span class="comment">// Create a new store instance.</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(&#123;</span><br><span class="line">  state () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123; <span class="comment">/* your root component */</span> &#125;)</span><br><span class="line"><span class="comment">//挂载vuex</span></span><br><span class="line">app.use(store)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用vuex</span></span><br><span class="line"><span class="keyword">import</span> &#123;useStore&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = useStore() <span class="comment">// 相当于 vue2 中的 this.$store</span></span><br><span class="line">  store.dispatch() <span class="comment">// 通过 store 对象来 dispatch 派发异步任务</span></span><br><span class="line">  store.commit() <span class="comment">// commit 修改 store 数据</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">let</span> category = computed(<span class="function">() =&gt;</span> store.state.home.currentCagegory</span><br><span class="line">  <span class="keyword">return</span> &#123; category &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-router知识点变迁"><a href="#4-router知识点变迁" class="headerlink" title="4.router知识点变迁"></a>4.router知识点变迁</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//常见history路由</span></span><br><span class="line"><span class="keyword">const</span> routerHistory = createWebHistory();</span><br><span class="line"><span class="comment">//创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: routerHistory,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/home.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;login&quot;</span>,</span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/login.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="comment">//挂载router</span></span><br><span class="line">createApp(App)</span><br><span class="line">  .use(router)</span><br><span class="line">  .mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用路由</span></span><br><span class="line"><span class="keyword">import</span> &#123;useRoute, useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = useRoute() <span class="comment">// 相当于 vue2 中的 this.$route</span></span><br><span class="line"><span class="keyword">const</span> router = useRouter() <span class="comment">// 相当于 vue2 中的 this.$router</span></span><br><span class="line"></span><br><span class="line">route   用于获取当前路由数据</span><br><span class="line">router  用于路由跳转</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue兼容IE</title>
    <url>/2021/03/05/vue%E5%85%BC%E5%AE%B9IE/</url>
    <content><![CDATA[<blockquote>
<p>​    背景：由于Vue中使用了ES6语法，因此低版本的IE浏览器是不兼容IE的，在vue不做适配的情况下，vue所生成的网页用IE浏览器中打开只会出现一片空白，因此要用到使用<strong>babel-polyfill</strong>转换成ES5</p>
</blockquote>
<span id="more"></span>        

<h4 id="安装-babel-polyfill"><a href="#安装-babel-polyfill" class="headerlink" title="安装**@babel/polyfill**"></a>安装**@babel/polyfill**</h4><p>​    通过npm安装,代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure>



<h4 id="配置main-js文件"><a href="#配置main-js文件" class="headerlink" title="配置main.js文件"></a>配置main.js文件</h4><p>​    注意：引入是必须放在main.js引入中的最前面，是最前面</p>
<p>​        如图下所示</p>
<p>​            <img src="/2021/03/05/vue%E5%85%BC%E5%AE%B9IE/1571967941644.png"></p>
<p>​    否则是无法应用babel-polyfill</p>
<h4 id="在index-html中配置IE的兼容（非必要）"><a href="#在index-html中配置IE的兼容（非必要）" class="headerlink" title="在index.html中配置IE的兼容（非必要）"></a>在index.html中配置IE的兼容（非必要）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="最后在config中修改webpack-base-conf-js配置"><a href="#最后在config中修改webpack-base-conf-js配置" class="headerlink" title="最后在config中修改webpack.base.conf.js配置"></a>最后在config中修改webpack.base.conf.js配置</h4><p>​    有些工程师喜欢在建立vue项目的时候将webpack抛出，形成一个build文件，</p>
<p>webpack.base.conf.js 就在该文件中</p>
<p><img src="/2021/03/05/vue%E5%85%BC%E5%AE%B9IE/1571968315173.png"></p>
<p>配置如下：</p>
<p>​    未替换换前的配置</p>
<p><img src="/2021/03/05/vue%E5%85%BC%E5%AE%B9IE/1571968380488.png"></p>
<p>​    替换后的配置</p>
<p>​    <img src="/2021/03/05/vue%E5%85%BC%E5%AE%B9IE/1571968462815.png"></p>
<p>步骤到目前就可以实现vue的项目在IE的运行了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue响应式原理v2.0与v3.0的区别</title>
    <url>/2021/03/02/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86v2-0%E4%B8%8Ev3-0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="深入响应性原理"><a href="#深入响应性原理" class="headerlink" title="深入响应性原理"></a>深入响应性原理</h1><p>vue3.0放弃了Object.defineProperty，并 采用了Proxy来实现响应式的功能。</p>
<p>vue2.0是使用Object.defineProperty来监控数据的变化的，其原理是通过发布者和订阅者（ getter/setter ）让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。</p>
<p>但是这种方式具有极大的局限性，由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。</p>
<ul>
<li>对于对象 无法监听对象的删除和添加</li>
<li>对于数组 利用索引直接设置一个数组项以及修改数组的长度时无法检测到数组的变化</li>
</ul>
<p>最新的 Proxy，相比 vue2 的 Object.defineProperty，能达到速度加倍、内存减半的成效。</p>
<span id="more"></span>

<h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p>举个简单的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">defaultObject</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(data)) &#123;</span><br><span class="line">            <span class="comment">//判断该项是否为对象，如果是，那么就继续往下遍历</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> data[key] == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">              data[key] = <span class="keyword">new</span> defaultObject(data[key]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, key, &#123;</span><br><span class="line">              <span class="comment">//当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。</span></span><br><span class="line">              configurable: <span class="literal">true</span>,</span><br><span class="line">              <span class="comment">//当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。</span></span><br><span class="line">              enumerable: <span class="literal">true</span>,</span><br><span class="line">              <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`你访问了<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;data[key]&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">return</span> data[key];</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`你设置了<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">                data[key] = val;</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//对象</span></span><br><span class="line">      <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        name: <span class="string">&quot;lzp&quot;</span>,</span><br><span class="line">        age: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> person = <span class="keyword">new</span> defaultObject(obj);</span><br><span class="line">      <span class="built_in">console</span>.log(person.name);</span><br><span class="line">      person.age = <span class="number">16</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(person.age);</span><br><span class="line">	<span class="comment">//无法监听到对象的添加</span></span><br><span class="line">      person.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(person.sex);</span><br><span class="line"><span class="comment">//无法监听到对象的删除</span></span><br><span class="line">      <span class="keyword">delete</span> person.name;</span><br><span class="line">      <span class="built_in">console</span>.log(person.name);</span><br><span class="line">      <span class="comment">//数组</span></span><br><span class="line">      <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">64</span>, <span class="number">10</span>];</span><br><span class="line">      <span class="keyword">const</span> arr2 = <span class="keyword">new</span> defaultObject(arr);</span><br><span class="line">      <span class="built_in">console</span>.log(arr2[<span class="number">0</span>]);</span><br><span class="line">      arr2[<span class="number">1</span>] = <span class="number">25</span>;</span><br><span class="line">      arr2[<span class="number">10</span>] = <span class="number">60</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(arr2[<span class="number">10</span>]);</span><br><span class="line">      arr2.length = <span class="number">20</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="/2021/03/02/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86v2-0%E4%B8%8Ev3-0%E7%9A%84%E5%8C%BA%E5%88%AB/image-20201204145818270.png"></p>
<p>不止如此，Object.defineProperty通过遍历所有的属性，当数据量一大起来，加载速度就无比的慢。</p>
<p>还有，由于Object.defineProperty是监听所有属性的变化，那么如果数据量巨大的话，所占的内存也会无比的多</p>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a><strong>Proxy</strong></h2><p><strong>Proxy</strong> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p>
<p>也就是无论访问对象的什么属性，之前定义的或是新增的属性，都会走到拦截中进行处理。这就解决了之前所无法监听的问题</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure>

<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li><strong>target</strong>：要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</li>
<li><strong>handler</strong>：一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 <code>p</code> 的行为。</li>
</ul>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  name: <span class="string">&quot;lzp&quot;</span>,</span><br><span class="line">  interest: &#123;</span><br><span class="line">    game: <span class="string">&quot;lol&quot;</span>,</span><br><span class="line">    move: <span class="string">&quot;钢铁侠&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj2, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, prop, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//   track(target, prop);</span></span><br><span class="line">    <span class="comment">//   console.log(arguments);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`你访问了<span class="subst">$&#123;prop&#125;</span>:<span class="subst">$&#123;target[prop]&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, value, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`你设置了<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(value)&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">p.name = <span class="string">&quot;lzp2&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.name);</span><br><span class="line">p.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">p.interest.game = <span class="string">&quot;守望先锋&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.interest.game);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="/2021/03/02/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86v2-0%E4%B8%8Ev3-0%E7%9A%84%E5%8C%BA%E5%88%AB/image-20201204154809023.png"></p>
<p>由上可知，新增或编辑属性，并不需要重新添加响应式处理，都能监听的到<br>因为 Proxy 是对对象的操作，只要你访问对象，就会走到 Proxy 的逻辑中</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>Proxy 和 Object.defineProperty 的使用方法看似很相似，其实 Proxy 是在更高维度上去拦截属性的</p>
<p><strong>Object.defineProperty</strong></p>
<p>Vue2 中，对于给定的 data：如 { count: 1 }，是需要根据具体的 key 也就是 count，去对 get 和 set 进行拦截，也就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.defineProperty(data, &#39;count&#39;, &#123;</span><br><span class="line">  get() &#123;&#125;,</span><br><span class="line">  set() &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>必须预先知道要拦截的 key 是什么，这也就是为什么 Vue2 里对于对象上的新增属性无能为力，所以 Vue 初始化的过程中需要遍历 data 来挟持数据变化，造成速度变慢，内存变大的原因</p>
<p>监听对象设置或删除属性时，一般使用 <code>this.$set()</code> 、<code>this.$delete()</code> 来监听</p>
<p><strong>Proxy</strong></p>
<p>而 Vue3 所使用的 Proxy，则是这样拦截的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Proxy(data, &#123;</span><br><span class="line">  get(key) &#123; &#125;,</span><br><span class="line">  set(key, value) &#123; &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以看到，proxy 不需要关心具体的 key，它去拦截的是 修改 data 上的任意 key 和 读取 data 上的任意 key<br>所以，不管是已有的 key 还是新增的 key，都会监听到<br>但是 Proxy 更加强大的地方还在于 Proxy 除了 get 和 set，还可以拦截更多的操作符，具体可看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">MDN</a></p>
<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><p><strong>Reflect</strong> 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与proxy handlers的方法相同， <code>Reflect</code>不是一个函数对象，因此它是不可构造的。</p>
<p>比较有用的三个方法</p>
<h4 id="Reflect-get"><a href="#Reflect-get" class="headerlink" title="Reflect.get()"></a><strong><code>Reflect.get()</code></strong></h4><p>​    与从 对象 (<code>target[propertyKey]</code>) 中读取属性类似，但它是通过一个函数执行来操作的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.get(target, propertyKey[, receiver])</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><strong>target</strong> –需要取值的目标对象</li>
<li><strong>propertyKey</strong> –需要获取的值的键值</li>
<li><strong>receiver</strong>–如果<code>target</code>对象中指定了<code>getter</code>，<code>receiver</code>则为<code>getter</code>调用时的<code>this</code>值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.get(obj, <span class="string">&quot;x&quot;</span>); <span class="comment">// 1 等同于 obj[&#x27;x&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="built_in">Reflect</span>.get([<span class="string">&quot;zero&quot;</span>, <span class="string">&quot;one&quot;</span>], <span class="number">1</span>); <span class="comment">// &quot;one&quot; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Proxy with a get handler</span></span><br><span class="line"><span class="keyword">var</span> x = &#123;<span class="attr">p</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(x, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">t, k, r</span>)</span> &#123; <span class="keyword">return</span> k + <span class="string">&quot;bar&quot;</span>; &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Reflect</span>.get(obj, <span class="string">&quot;foo&quot;</span>); <span class="comment">// &quot;foobar&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Reflect-set"><a href="#Reflect-set" class="headerlink" title="Reflect.set()"></a><strong><code>Reflect.set()</code></strong></h4><p>就像在一个对象上设置一个属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.set(target, propertyKey, value[, receiver])</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><strong>target</strong> –设置属性的目标对象。</li>
<li><strong>propertyKey</strong> –设置的属性的名称。</li>
<li><strong>value</strong>–设置的值。</li>
<li><strong>receiver</strong>–如果<code>target</code>对象中指定了<code>getter</code>，<code>receiver</code>则为<code>getter</code>调用时的<code>this</code>值。</li>
</ul>
<p>返回值：返回一个 <code>Boolean</code>值表明是否成功设置属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj, <span class="string">&quot;prop&quot;</span>, <span class="string">&quot;value&quot;</span>); <span class="comment">// true</span></span><br><span class="line">obj.prop; <span class="comment">// &quot;value&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;duck&quot;</span>, <span class="string">&quot;duck&quot;</span>, <span class="string">&quot;duck&quot;</span>];</span><br><span class="line"><span class="built_in">Reflect</span>.set(arr, <span class="number">2</span>, <span class="string">&quot;goose&quot;</span>); <span class="comment">// true</span></span><br><span class="line">arr[<span class="number">2</span>]; <span class="comment">// &quot;goose&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// It can truncate an array.</span></span><br><span class="line"><span class="built_in">Reflect</span>.set(arr, <span class="string">&quot;length&quot;</span>, <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">arr; <span class="comment">// [&quot;duck&quot;];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// With just one argument, propertyKey and value are &quot;undefined&quot;.</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.set(obj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Reflect</span>.getOwnPropertyDescriptor(obj, <span class="string">&quot;undefined&quot;</span>);</span><br><span class="line"><span class="comment">// &#123; value: undefined, writable: true, enumerable: true, configurable: true &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Reflect-has"><a href="#Reflect-has" class="headerlink" title="Reflect.has()"></a><strong><code>Reflect.has()</code></strong></h4><p>作用与 <code>in</code> 操作符相同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.has(target, propertyKey)</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><p><strong>target</strong>–目标对象.</p>
</li>
<li><p><strong>propertyKey</strong>–属性名，需要检查目标对象是否存在此属性。</p>
</li>
</ul>
<p>返回值：返回一个 <code>Boolean</code>类型的对象指示是否存在此属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.has(&#123;<span class="attr">x</span>: <span class="number">0</span>&#125;, <span class="string">&quot;x&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(&#123;<span class="attr">x</span>: <span class="number">0</span>&#125;, <span class="string">&quot;y&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果该属性存在于原型链中，返回true </span></span><br><span class="line"><span class="built_in">Reflect</span>.has(&#123;<span class="attr">x</span>: <span class="number">0</span>&#125;, <span class="string">&quot;toString&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Proxy 对象的 .has() 句柄方法</span></span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">t, k</span>)</span> &#123; <span class="keyword">return</span> k.startsWith(<span class="string">&quot;door&quot;</span>); &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Reflect</span>.has(obj, <span class="string">&quot;doorbell&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(obj, <span class="string">&quot;dormitory&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<p>原文来源 <a href="https://ainyi.com/93">Vue3 为何使用 Proxy 实现数据监听</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>事件循环---Event Loop</title>
    <url>/2021/02/24/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-Event-Loop/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    javascript是一门单线程的非阻塞的脚本语言。最基本的用途就是与浏览器交互。</p>
<p>单线程–基于该用途，使得javascript不可能成为多线程，因为在浏览器中，我们需要对各种各样的dom操作，单线程确保了一次只能对dom进行一次操作，假若javascript是一门多线程语言，就有可能遇到多个线程对同一个dom进行操作，一个往其中添加事件，一个删除了这个dom，这时就会出现bug。</p>
<p>javascript的另一个特点就是非阻塞，至于javascript是如何做到非阻塞的呢，答案就是本文要记录的—event loop（事件循环）</p>
<span id="more"></span>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="1、执行栈与事件队列"><a href="#1、执行栈与事件队列" class="headerlink" title="1、执行栈与事件队列"></a>1、执行栈与事件队列</h4><p>当javascript代码执行的时候会将不同的变量存于内存中的不同位置：堆（heap）和栈（stack）中来加以区分。</p>
<p>堆(heap)：存放着一些对象</p>
<p>栈(stack)：存放着一些基础类型变量以及对象的指针</p>
<p><strong>注意：执行栈和上面的栈的意义有所不同</strong></p>
<h5 id="（1）、执行栈"><a href="#（1）、执行栈" class="headerlink" title="（1）、执行栈"></a>（1）、执行栈</h5><p>当我们在调用一个方法是，js会生成一个与这个方法对应的执行环境（context），也叫执行上下文。这个执行环境中存在着这个方法的私有作用域、上层作用域的指向、方法的参数、作用域中定义的变量以及这个作用域的this对象。而当一系列方法被依次调用的时候，由于js是单线程的，一次只能执行一个方法，于是这些方法被排在了一个单独的地方—执行栈。</p>
<p>当一个js被第一次执行的时候，js引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。如果这个执行的是一个方法，那么js会往执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中代码。当这个执行环境中的代码执行完毕并返回结果后，js会推出这个执行环境并将该执行环境销毁，回到上一个方法的执行环境，这个过程会反复执行，知道执行栈中的代码全部执行完毕。</p>
<p>由下图显示，其中的global就是初次运行脚本时向执行栈中加入的代码：</p>
<p><img src="/2021/02/24/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-Event-Loop/%E6%A0%88gif.webp" alt="栈gif"></p>
<p>由上图可知，一个方法执行会向执行栈中加入这个方法的执行环境，在这个执行环境中还可以调用其他方法，甚至是自己，其结果不过是在执行栈中再添加一个执行环境。这个过程可以是无限进行下去的，除非发生了栈溢出，即超过了所能使用内存的最大值。</p>
<p>当然上述所说的是同步代码的执行。接下就是异步的了</p>
<h5 id="（2）、事件队列"><a href="#（2）、事件队列" class="headerlink" title="（2）、事件队列"></a>（2）、事件队列</h5><p>js引擎在遇到一个异步事件后并不会等待其返回结果，而是将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列中，即事件队列。被放进事件队列中不会立即执行其回调，而是等待当前执行栈中的所有任务都执行完毕，待主线程处于闲置状态是，主线程会去查看事件队列中是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调函数存进执行栈中，然后执行其中的同步代码，如此反复，就形成了一个无限的循环，这就是事件循环</p>
<p><img src="/2021/02/24/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-Event-Loop/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.jpg" alt="事件循环"></p>
<p>图中的stack表示我们所说的执行栈，web apis则是代表一些异步事件，而callback queue即事件队列。</p>
<h4 id="2、macro-task与micro-task"><a href="#2、macro-task与micro-task" class="headerlink" title="2、macro task与micro task"></a>2、macro task与micro task</h4><p>以上的事件循环过程是一个宏观的表述，实际上因为异步任务之间并不相同，因此他们的执行优先级也有区别。不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）。</p>
<p>以下事件属于宏任务：</p>
<ul>
<li><code>setInterval()</code></li>
<li><code>setTimeout()</code></li>
</ul>
<p>以下事件属于微任务：</p>
<ul>
<li><code>new Promise()</code></li>
<li><code>new MutaionObserver()</code></li>
</ul>
<p>前面我们介绍过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p>
<p>我们只需记住<strong>当当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</strong>。</p>
<p>举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    resolve(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>原文来源：<a href="https://zhuanlan.zhihu.com/p/33058983">详解JavaScript中的Event Loop（事件循环）机制</a></p>
<p>事件循环补充</p>
<p>宏任务(macro-task)：包括整体代码script、setTimeout、setInterval、MessageChannel、postMessage、setImmediate。</p>
<p> 微任务(micro-task)：Promise、process.nextTick、MutationObsever。</p>
<p>循环机制–不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同(宏任务)的Event Queue。而Promise和process.nextTick会进入相同(微任务)的Event Queue。</p>
<p>大致执行顺序</p>
<ol>
<li>「宏任务」、「微任务」都是队列，一段代码执行时，会先执行宏任务中的同步代码。</li>
<li>进行第一轮事件循环的时候会把全部的js脚本当成一个宏任务来运行。</li>
<li>如果执行中遇到setTimeout之类宏任务，那么就把这个setTimeout内部的函数推入「宏任务的队列」中，<strong>下一轮宏任务</strong>执行时调用。</li>
<li>如果执行中遇到 promise.then() 之类的微任务，就会推入到「<strong>当前宏任务</strong>的微任务队列」中，在<strong>本轮宏任务</strong>的同步代码都执行完成后，依次执行所有的微任务。</li>
<li>第一轮事件循环中当执行完全部的同步脚本以及微任务队列中的事件，这一轮事件循环就结束了，开始第二轮事件循环。</li>
<li>第二轮事件循环同理先执行同步脚本，遇到其他宏任务代码块继续追加到「宏任务的队列」中，遇到微任务，就会推入到「当前宏任务的微任务队列」中，在本轮宏任务的同步代码执行都完成后，依次执行当前所有的微任务。</li>
<li>开始第三轮，循环往复…</li>
</ol>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//setTimeout -- 宏任务 暂不执行--推进宏任务队列中</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// new Promise --立即执行 promise.then函数分配到微任务中</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>) <span class="comment">// 同步任务</span></span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//顺序执行</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="comment">//这里有留意的是Promise.then()里面的方法才会被推进微任务队列中，所以执行顺序为1-2-3-4</span></span><br></pre></td></tr></table></figure>



<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>关键来了</p>
<p>当函数中运用到async/await后事件循环就变得不同了</p>
<p>在分析事件循环前先讲讲什么是async/await</p>
<h4 id="async-await是什么？"><a href="#async-await是什么？" class="headerlink" title="async/await是什么？"></a>async/await是什么？</h4><p>我们创建了 promise 但不能同步等待它执行完成。我们只能通过 then 传一个回调函数这样很容易再次陷入 promise 的回调地狱。</p>
<p>实际上，async/await 在底层转换成了 promise 和 then 回调函数。也就是说，这是 promise 的语法糖。每次我们使用 await, **<u>解释器都创建一个 promise 对象，然后把剩下的 async 函数中的操作放到 then 回调函数中</u>**。async/await 的实现，离不开 Promise。从字面意思来理解，async 是“异步”的简写，而 await 是 async wait 的简写可以认为是等待异步方法执行完成。</p>
<p>举个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> asyFn = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">666</span>)</span><br><span class="line">	<span class="keyword">await</span> aa()</span><br><span class="line">    <span class="comment">//await后面的操作全放在了promise的then函数中了</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">77</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> proFn = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">666</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">proFn().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">77</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="async-await用来干什么？"><a href="#async-await用来干什么？" class="headerlink" title="async/await用来干什么？"></a>async/await用来干什么？</h4><p>用来优化 promise 的回调问题，被称作是异步的终极解决方案。 – 解决回掉地狱</p>
<h4 id="async-await内部做了什么？"><a href="#async-await内部做了什么？" class="headerlink" title="async/await内部做了什么？"></a>async/await内部做了什么？</h4><p>async 函数会返回一个 Promise 对象，如果在函数中 return 一个直接量（普通变量），async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。如果你返回了promise那就以你返回的promise为准。 await 是在等待，等待运行的结果也就是返回值。await后面通常是一个异步操作（promise），但是这不代表 await 后面只能跟异步操作 await 后面实际是可以接普通函数调用或者直接量的。</p>
<h4 id="await的等待机制？"><a href="#await的等待机制？" class="headerlink" title="await的等待机制？"></a>await的等待机制？</h4><p>如果 await 后面跟的不是一个 Promise，那 await 后面表达式的运算结果就是它等到的东西；如果 await 后面跟的是一个 Promise 对象，await 它会“阻塞”后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值作为 await 表达式的运算结果。但是此“阻塞”非彼“阻塞”这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成“阻塞”，<strong>它内部所有的“阻塞”都被封装在一个 Promise 对象中异步执行。（这里的阻塞理解成异步等待更合理）</strong></p>
<h4 id="async-await在使用过程中有什么规定？"><a href="#async-await在使用过程中有什么规定？" class="headerlink" title="async/await在使用过程中有什么规定？"></a>async/await在使用过程中有什么规定？</h4><p>每个 async 方法都返回一个 promise 对象。await 只能出现在 async 函数中。</p>
<h4 id="async-await-在什么场景使用？"><a href="#async-await-在什么场景使用？" class="headerlink" title="async/await 在什么场景使用？"></a>async/await 在什么场景使用？</h4><p>单一的 Promise 链并不能发现 async/await 的优势，但是如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</p>
<h4 id="async-await的运行机制"><a href="#async-await的运行机制" class="headerlink" title="async/await的运行机制"></a>async/await的运行机制</h4><p>大致方法：</p>
<ol>
<li>async定义的是一个Promise函数和普通函数一样只要不调用就不会进入事件队列。</li>
<li>async内部如果没有主动return Promise，那么async会把函数的返回值用Promise包装。</li>
<li>await关键字必须出现在async函数中，await后面不是必须要跟一个异步操作，也可以是一个普通表达式。</li>
<li>遇到await关键字，await右边的语句会被立即执行然后<strong>await下面的代码进入等待状态，等待await得到结果</strong>。 await后面如果不是 promise 对象, <strong>await会阻塞后面的代码，先执行async外面的同步代码，同步代码执行完，再回到async内部</strong>，把这个非promise的东西，作为 await表达式的结果。 <strong>await后面如果是 promise 对象，await 也会暂停async后面的代码，先执行async外面的同步代码</strong>，等着 Promise 对象 fulfilled，然后把 resolve 的参数作为 await 表达式的运算结果。</li>
</ol>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终结果</span></span><br><span class="line"><span class="number">1</span>-<span class="number">2</span>-<span class="number">3</span>-<span class="number">4</span>-<span class="number">5</span>-<span class="number">6</span></span><br></pre></td></tr></table></figure>

<ol>
<li>6是宏任务在下一轮事件循环执行</li>
<li>先同步输出1，然后调用了async1()，输出2。</li>
<li>await async2() 会先运行async2()，5进入等待状态。</li>
<li>输出3，这个时候先执行async函数外的同步代码输出4。</li>
<li>最后await拿到等待的结果继续往下执行输出5。</li>
<li>进入第二轮事件循环输出6。</li>
</ol>
<p>例子2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="comment">//由于await后面并不是promise对象，因此会将后面的代码推进微任务中，然后再执行asyn外面的代码</span></span><br><span class="line">  <span class="keyword">await</span> <span class="string">&#x27;await的结果&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//结果 1-2-3-4-5-6</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line"><span class="number">1</span>-<span class="number">2</span>-<span class="number">3</span>-<span class="number">4</span>-<span class="number">5</span>-<span class="number">6</span>-<span class="number">7</span>-<span class="number">8</span></span><br><span class="line"><span class="comment">//1.同步代码先执行1，然后进入async1中输出2</span></span><br><span class="line"><span class="comment">//2.因为遇到了await因此代码进入async2中，并将7终止执行</span></span><br><span class="line"><span class="comment">//3.执行完async2输出3后跳出async函数并执行后面同步代码</span></span><br><span class="line"><span class="comment">//4.输出4后将6推到微任务队列中</span></span><br><span class="line"><span class="comment">//5.输出5后宏任务执行完了，执行微任务，并将6输出</span></span><br><span class="line"><span class="comment">//6.到处就返回async1中继续执行代码输出7</span></span><br><span class="line"><span class="comment">//6.最终执行8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//值得一提的是</span></span><br><span class="line"><span class="comment">//在谷歌浏览器输出的结果是12345768，7和6的输出顺序互换了，这是因为谷歌在73版本后修改了判断规则导致的</span></span><br></pre></td></tr></table></figure>

<p>资料来源：<a href="https://juejin.im/post/5c148ec8e51d4576e83fd836">从event loop到async await来了解事件循环机制</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>事件节流和事件防抖</title>
    <url>/2021/03/05/%E4%BA%8B%E4%BB%B6%E8%8A%82%E6%B5%81%E5%92%8C%E4%BA%8B%E4%BB%B6%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<blockquote>
<p>当一些事件被频繁出发导致页面出现卡顿甚至是死循环，这时就需要通过事件节流或者事件防抖来解决该事情</p>
</blockquote>
<span id="more"></span>

<h3 id="事件节流"><a href="#事件节流" class="headerlink" title="事件节流"></a>事件节流</h3><p> 事件节流（throttle）：简而言之就是在一定的时间内只出发一次，当事件被频繁触发，通过限制一段时间内的执行次数来起到优化的作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过闭包的方式来实现</span></span><br><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123; </span><br><span class="line">    <span class="comment">//设置按钮</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;            </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;                </span><br><span class="line">        <span class="keyword">var</span> context = <span class="built_in">this</span>;               </span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;                </span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;                    </span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;                       </span><br><span class="line">                func.apply(context, args);                        </span><br><span class="line">                timer = <span class="literal">null</span>;                    </span><br><span class="line">            &#125;, delay);                </span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;        </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;            </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());        </span><br><span class="line">&#125;        </span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttle(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>



<h3 id="事件防抖"><a href="#事件防抖" class="headerlink" title="事件防抖"></a>事件防抖</h3><p>事件防抖（debounce）：当事件频繁触发后，在一段时间没有触发该事件时才调用其中的处理函数</p>
<p>通过定时器实现防抖：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span>(timeout !== <span class="literal">null</span>)   <span class="built_in">clearTimeout</span>(timeout);        </span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(fn, wait);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, debounce(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>



<p>通过时间戳</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span>(now - prev &gt;= delay) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      prev = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random())</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttle(handle, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>



<p>通过时间戳+定时器的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span>(now - prev &gt;= delay) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      prev = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random())</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttle(handle, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>初步了解Promise</title>
    <url>/2021/02/24/%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3Promise/</url>
    <content><![CDATA[<blockquote>
<p>​    Promise是一个对象，用于表示一个异步请求操作的最终结果（不管是成功和失败），并将其结果值返回出去，在当前的javascript程序中，promise用法众多，是一种十分流行的异步编程方式</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(...)&#123;</span><br><span class="line">       resolve()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<span id="more"></span>        

<p>用法：</p>
<p>在创建Promise时能通过传入一个带有resolve和reject参数的callback函数，并在Promise执行时立即执行，resolve和reject两个函数作为参数传到callback函数中，并起到修改promise状态的作用。</p>
<p>​    resolve():将promise的状态改为fulfilled(完成状态);</p>
<p>​    reject():将promise的状态改为rejected(失败状态)</p>
<p>顺带一提</p>
<p>​    <strong>Promise</strong> 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p>
<p>​    Promise有3个状态</p>
<p>​        1.<code>pengding</code>：初始状态，既不是成功，也不是失败</p>
<p>​        2.<code>fulfilled</code>：代表操作成功</p>
<p>​        3.<code>rejected</code>：代表操作失败</p>
<p>​    当promise返回任意一种结果的时候，Promise对象的then方法绑定的处理方法就会被执行。</p>
<p>​    重点：<code>Promise.prototype.then</code> 和<code>Promise.prototype.catch</code> 返回的都是Promise对象，因此他们可以被链式调用</p>
<p><img src="/2021/02/24/%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3Promise/promises.png" alt="promises"></p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="1、Promise-all-iterable"><a href="#1、Promise-all-iterable" class="headerlink" title="1、Promise.all(iterable)"></a>1、<strong>Promise.all(iterable)</strong></h4><p>​        **Promise.all(iterable)**方法返回一个Promise实例，该实例在iterable参数内所有的promise都完成（resolved）或参数中不包含 <code>promise</code> 时回调完成（resolve）；如果参数中  <code>promise</code> 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 <code>promise</code> 的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个成功的回掉</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//一个String类型</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//异步完成的操作</span></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve,<span class="number">100</span>,<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//一个异步失败的操作</span></span><br><span class="line"><span class="keyword">var</span> p4 =  <span class="built_in">Promise</span>.reject(<span class="number">5</span>)</span><br><span class="line"><span class="comment">//所有参数都返回完成状态</span></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p2,p3]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    输出结果</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//[3,4,&#x27;foo&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//p4返回一个错误，则立即停止操作并将错误返回</span></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p2,p3,p4]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//通过catch捕获错误，并将其返回输出出来</span></span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2、Promise-race-iterable"><a href="#2、Promise-race-iterable" class="headerlink" title="2、Promise.race(iterable)"></a>2、<strong>Promise.race(iterable)</strong></h4><p>​    当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">5000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        reject(<span class="string">&#x27;three&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p4 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        reject(<span class="string">&#x27;four&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p5 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        reject(<span class="string">&#x27;five&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p6 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        reject(<span class="string">&#x27;six&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1,p2]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1,p3]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.race([p1,p4]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.race([p4,p5]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.race([p5,p6]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//one</span></span><br><span class="line"><span class="comment">//one</span></span><br><span class="line"><span class="comment">//one</span></span><br><span class="line"><span class="comment">//four</span></span><br><span class="line"><span class="comment">//five (bug)</span></span><br></pre></td></tr></table></figure>

<p>在运行Promise.race()时往往会出现一些问题，就是由于2个promise运行时间过短，间隔过小，导致会出现像第五个结果的情况。</p>
<p>由于javascript是单线程运作的，系统是从上往下执行代码的，当系统遇到异步操作的时候，会将异步操作的代码放到一个类似于时间队列的地方，并按异步操作代码所执行的时间由小到大进行排列，当主线程的栈中的任务已经执行完毕后，系统会将时间队列中的任务一一推进主线程的栈中执行，这操作就关系到了javascript的事件循环机制。</p>
<p>至于为什么会出现像第五个结果的情况呢，因为两者执行的时间过于短，导致p5比p6先一步存进队列中，导致了上述情况的出现</p>
<h4 id="3、Promise-reject-reason"><a href="#3、Promise-reject-reason" class="headerlink" title="3、Promise.reject(reason)"></a>3、<strong>Promise.reject(reason)</strong></h4><p>​    <code>**Promise.reject(reason)**</code>方法返回一个带有拒绝原因reason参数的Promise对象。</p>
<h4 id="4-Promise-resolve-value"><a href="#4-Promise-resolve-value" class="headerlink" title="4.Promise.resolve(value)"></a>4.<strong>Promise.resolve(value)</strong></h4><p>​    <code>Promise.resolve(value)</code>方法返回一个以给定值解析后的<code>Promise</code> 对象。如果该值为promise，返回这个promise；如果这个值是thenable（即带有<code>&quot;then&quot; 方法</code>)），返回的promise会“跟随”这个thenable的对象，采用它的最终状态；否则返回的promise将以此值完成。此函数将类promise对象的多层嵌套展平。</p>
<h3 id="Promise-prototype"><a href="#Promise-prototype" class="headerlink" title="Promise.prototype"></a>Promise.prototype</h3><h5 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h5><p><strong>Promise.prototype.constructor</strong></p>
<p>​    返回被创建的实例函数.  默认为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> 函数.</p>
<h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><h6 id="1、Promise-prototype-catch"><a href="#1、Promise-prototype-catch" class="headerlink" title="1、Promise.prototype.catch()"></a>1、Promise.prototype.catch()</h6><p>​    添加一个拒绝(rejection) 回调到当前 promise, 返回一个新的promise。当这个回调函数被调用，新 promise 将以它的返回值来resolve，否则如果当前promise 进入fulfilled状态，则以当前promise的完成结果作为新promise的完成结果.</p>
<h6 id="2、Promise-prototype-then"><a href="#2、Promise-prototype-then" class="headerlink" title="2、Promise.prototype.then()"></a>2、Promise.prototype.then()</h6><p>​    添加解决(fulfillment)和拒绝(rejection)回调到当前 promise, 返回一个新的 promise, 将以回调的返回值来resolve</p>
<h6 id="3、Promise-prototype-finally"><a href="#3、Promise-prototype-finally" class="headerlink" title="3、Promise.prototype.finally()"></a>3、Promise.prototype.finally()</h6><p>​    添加一个事件处理回调于当前promise对象，并且在原promise对象解析完毕后，返回一个新的promise对象。回调会在当前promise运行完毕后被调用，无论当前promise的状态是完成(fulfilled)还是失败(rejected)</p>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><h4 id="1-当promise进入到then内部时，当内部的方法出现错误的时候，catch也会捕抓到"><a href="#1-当promise进入到then内部时，当内部的方法出现错误的时候，catch也会捕抓到" class="headerlink" title="1.当promise进入到then内部时，当内部的方法出现错误的时候，catch也会捕抓到"></a>1.当promise进入到then内部时，当内部的方法出现错误的时候，catch也会捕抓到</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// &quot;Success!&quot;</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;oh, no!&#x27;</span>;</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e); <span class="comment">// &quot;oh, no!&quot;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;after a catch the chain is restored&#x27;</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Not fired due to the catch&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<p>原文来源：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序常见问题</title>
    <url>/2021/03/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>开发遇到的问题</p>
</blockquote>
<span id="more"></span>        

<h2 id="IOS遇到的问题"><a href="#IOS遇到的问题" class="headerlink" title="IOS遇到的问题"></a>IOS遇到的问题</h2><p>1.ios中new Date()时间格式不兼容</p>
<p>在后端返回了时间的格式是‘2020-01-01 16:50:50’时，在安卓上可以显示，但到了ios上无法显示了</p>
<p>原因是ios的时间格式是不兼容时间中出现”-“的，通过正则将时间中的**’-‘<strong>替换为</strong>‘/‘**</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="string">&#x27;2018-12-10 11:11:11&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> temporaryTime1 = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line">   timeRemain1: temporaryTime1,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* 利用正则表达式替换时间中的”-”为”/”即可 */</span></span><br><span class="line"><span class="keyword">let</span> time = <span class="string">&#x27;2018-12-10 11:11:11&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> temporaryTime = <span class="keyword">new</span> <span class="built_in">Date</span>(time.replace(<span class="regexp">/-/g</span>,<span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"><span class="keyword">let</span> temporaryTime1 = <span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line"><span class="built_in">this</span>.setData(&#123;</span><br><span class="line">    timeRemain: temporaryTime,</span><br><span class="line">    timeRemain1: temporaryTime1,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h3><h4 id="子组件接受父组件的值"><a href="#子组件接受父组件的值" class="headerlink" title="子组件接受父组件的值"></a>子组件接受父组件的值</h4><p>子组件在properties中定义需要从父组件中接受的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">   <span class="comment">//标题</span></span><br><span class="line">   title: &#123;</span><br><span class="line">     type: <span class="built_in">String</span>,</span><br><span class="line">     value: <span class="string">&#x27;出勤天数&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   titleData: &#123;</span><br><span class="line">     type: <span class="built_in">String</span>,</span><br><span class="line">     value: <span class="string">&#x27;20天&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   isDrop: &#123;</span><br><span class="line">     type: <span class="built_in">Boolean</span>,</span><br><span class="line">     value: <span class="literal">true</span></span><br><span class="line">   &#125;,</span><br><span class="line">   state: &#123;</span><br><span class="line">     type: <span class="built_in">Boolean</span>,</span><br><span class="line">     value: <span class="literal">false</span></span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<h4 id="父组件向子组件穿参数"><a href="#父组件向子组件穿参数" class="headerlink" title="父组件向子组件穿参数"></a>父组件向子组件穿参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;childer title=<span class="string">&#x27;&#123;&#123;father_data&#125;&#125;&#x27;</span> titleData=<span class="string">&#x27;&#123;&#123;20&#125;&#125;&#x27;</span>  /&gt;</span><br></pre></td></tr></table></figure>



<h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p><strong>子组件通过事件传值，绑定一个事件 close：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&#x27;iosTip-close&#x27;</span> bindtap=<span class="string">&#x27;close&#x27;</span>&gt;&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<p><strong>事件close需要写上triggerEvent：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">close: function() &#123;</span><br><span class="line">      var myShow &#x3D; &#123;</span><br><span class="line">        myShow: false</span><br><span class="line">      &#125;</span><br><span class="line">      this.triggerEvent(&#39;myevent&#39;, myShow) &#x2F;&#x2F;myevent自定义名称事件，父组件中使用</span><br><span class="line"> &#x2F;&#x2F; triggerEvent函数有3个参数 </span><br><span class="line"> &#x2F;**</span><br><span class="line"> *@params &#123;String&#125; myevent 自定自定义事件的名字</span><br><span class="line"> *@params &#123;Object&#125;  myEventDetail 往父组件中传的参</span><br><span class="line"> *@params &#123;Object&#125; myEventOption 触发事件的选项包括：</span><br><span class="line"> *</span><br><span class="line">*bubbles	Boolean	否	false	事件是否冒泡</span><br><span class="line">*composed	Boolean	否	false	事件是否可以穿越组件边界，为false时，事件将只能在引用组件的节点树上触发，不进入其他任何组件内部</span><br><span class="line">*capturePhase	Boolean	否	false	事件是否拥有捕获阶段</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">      this.triggerEvent(&#39;myevent&#39;, myEventDetail, myEventOption)</span><br></pre></td></tr></table></figure>

<p><strong>父组件中引入子组件，并在子组件中写上 bind:myevent：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;iosTip bind:myevent=<span class="string">&quot;onGetShow&quot;</span> wx:<span class="keyword">if</span>=<span class="string">&quot;&#123;&#123;IsIosShow&#125;&#125;&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>父组件的即可通过onGetShow拿到子组件传过来的值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onGetShow: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.detail.myShow)</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      IsIosShow: e.detail.myShow</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>神奇的定时器</title>
    <url>/2021/02/25/%E7%A5%9E%E5%A5%87%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><blockquote>
<p>与传统的定时器setTimeout和setInterval不同，requestAnimationFrame不需要设置任何的时间间隔，这样是为什么呢？为什么requestAnimationFrame会被成为神奇的定时器呢？</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    计时器一直是javascript动画的核心技术。而编写动画循环的关键是要知道延迟时间多长合适。一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅；另一方面，循环间隔还要足够长，这样才能确保浏览器有能力渲染产生的变化。</p>
<p>​    大多数电脑显示器的刷新频率是60Hz，大概相当于每秒钟重绘60次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是1000ms/60，约等于16.6ms</p>
<p>　　而setTimeout和setInterval的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行</p>
<p>　　requestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果</p>
<span id="more"></span>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>​    【1】requestAnimationFrame会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率</p>
<p>​    【2】在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的CPU、GPU和内存使用量</p>
<p>​    【3】requestAnimationFrame是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置定时器</span></span><br><span class="line"><span class="keyword">let</span> time = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">666</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//清除定时器</span></span><br><span class="line">cancelAnimationFrame(time);</span><br></pre></td></tr></table></figure>



<h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><p>​    IE9-不兼容</p>
<p>简单兼容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) &#123;</span><br><span class="line">    requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(fn, <span class="number">17</span>);</span><br><span class="line">    &#125;;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>严格模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">window</span>.requestAnimationFrame)&#123;</span><br><span class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>,<span class="number">16.7</span>-(currTime - lastTime));</span><br><span class="line">        <span class="keyword">var</span> id  = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback(currTime + timeToCall);</span><br><span class="line">        &#125;,timeToCall);</span><br><span class="line">        lastTime = currTime + timeToCall;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>兼容清除定时器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame) &#123;</span><br><span class="line">    <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(id);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;myDiv&quot;</span> style=<span class="string">&quot;background-color: lightblue;width: 0;height: 20px;line-height: 20px;&quot;</span>&gt;<span class="number">0</span>%&lt;/div&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;run&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    myDiv.style.width = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    cancelAnimationFrame(timer);</span><br><span class="line">    timer = requestAnimationFrame(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(myDiv.style.width) &lt; <span class="number">500</span>)&#123;</span><br><span class="line">            myDiv.style.width = <span class="built_in">parseInt</span>(myDiv.style.width) + <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            myDiv.innerHTML =     <span class="built_in">parseInt</span>(myDiv.style.width)/<span class="number">5</span> + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            timer = requestAnimationFrame(fn);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cancelAnimationFrame(timer);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>





<p>原文来源：<a href="https://www.cnblogs.com/xiaohuochai/p/5777186.html">https://www.cnblogs.com/xiaohuochai/p/5777186.html</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>首屏加载优化</title>
    <url>/2021/02/24/%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>背景：当vue的项目在上线后，由于各种原因导致第一次加载时过慢，因此需要通过各种方法解决该问题</p>
</blockquote>
<h3 id="1-解决思路"><a href="#1-解决思路" class="headerlink" title="1.解决思路"></a>1.解决思路</h3><p>​    1.压缩代码和图片</p>
<p>​    2.组件和图片按需加载</p>
<p>​    3.通过cdn引入资源，避免将其直接打包</p>
<p>​    4.通过gzip搭配服务器压缩代码（重点）</p>
<span id="more"></span>        

<h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h3><h4 id="1-了解项目所有包的占比"><a href="#1-了解项目所有包的占比" class="headerlink" title="1.了解项目所有包的占比"></a>1.了解项目所有包的占比</h4><p>​        运用一款打包分析工具Webpack Bundle Analyzer来清晰得了解项目包的情况</p>
<p>​        安装：    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-bundle-analyzer &#x2F;&#x2F;npm安装</span><br><span class="line">yarn add -s webpack-bundle-analyzer -D&#x2F;&#x2F;yarn 安装</span><br></pre></td></tr></table></figure>

<p>​        配置：</p>
<p>​            通常在webpack.prod.conf.js中实现配置<img src="/2021/02/24/%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96/1572861741246.png" alt="webpack配置"></p>
<p> 配置代码为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">    analyzerMode: <span class="string">&#x27;server&#x27;</span>,</span><br><span class="line">    analyzerHost: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    analyzerPort: <span class="number">8888</span>, <span class="comment">// 运行后的端口号</span></span><br><span class="line">    reportFilename: <span class="string">&#x27;report.html&#x27;</span>,</span><br><span class="line">    defaultSizes: <span class="string">&#x27;parsed&#x27;</span>,</span><br><span class="line">    openAnalyzer: <span class="literal">true</span>,</span><br><span class="line">    generateStatsFile: <span class="literal">false</span>,</span><br><span class="line">    statsFilename: <span class="string">&#x27;stats.json&#x27;</span>,</span><br><span class="line">    statsOptions: <span class="literal">null</span>,</span><br><span class="line">    logLevel: <span class="string">&#x27;info&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当项目build后会出现一个页面，其中包含各种的占比和其大小，根据该图能针对不同的包进行操作。</p>
<p><img src="/2021/02/24/%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96/1572861934155.png" alt="包裹大小"></p>
<h4 id="2-element-ui的按需加载"><a href="#2-element-ui的按需加载" class="headerlink" title="2.element-ui的按需加载"></a>2.element-ui的按需加载</h4><p>​        当element-ui全局引入时，打包出来的文件十分大，因此要按需引入</p>
<p>​        但想对element-ui按需加载需要需要组件来帮助<a href="https://github.com/QingWei-Li/babel-plugin-component">babel-plugin-component</a></p>
<p>​        首先，安装 babel-plugin-component：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure>

<p>​        然后，将 .babelrc 修改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;es2015&quot;</span>, &#123; <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [[<span class="string">&quot;component&quot;</span>, [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">      <span class="string">&quot;styleLibraryName&quot;</span>: <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你只希望引入部分组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button, Select &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(Button.name, Button)</span><br><span class="line">Vue.component(Select.name, Select)</span><br><span class="line"><span class="comment">/* 或写为</span></span><br><span class="line"><span class="comment"> * Vue.use(Button)</span></span><br><span class="line"><span class="comment"> * Vue.use(Select)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>实现效果如下：</p>
<p><img src="/2021/02/24/%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96/1572862377991.png" alt="按需加载"></p>
<h4 id="3-组件按需加载"><a href="#3-组件按需加载" class="headerlink" title="3.组件按需加载"></a>3.组件按需加载</h4><p>​        如图所示</p>
<p><img src="/2021/02/24/%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96/1572862490945.png" alt="组件按需加载"></p>
<h4 id="4-cdn引入"><a href="#4-cdn引入" class="headerlink" title="4.cdn引入"></a>4.cdn引入</h4><p>​        在index.html中引入cdn资源</p>
<p>​            如图所示</p>
<p><img src="/2021/02/24/%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96/1572862844298.png" alt="cdn"></p>
<p>​        修改 build/webpack.base.conf.js ，添加或修改externals</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;vuex&#x27;</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span> </span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>​        修改src/main.js src/router/index.js 注释掉import引入的vue,vue-resource</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import Vue from &#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// import VueResource from &#x27;vue-resource&#x27;</span></span><br><span class="line"><span class="comment">// Vue.use(VueResource)</span></span><br></pre></td></tr></table></figure>

<h4 id="5-gzip压缩（关键）"><a href="#5-gzip压缩（关键）" class="headerlink" title="5.gzip压缩（关键）"></a>5.gzip压缩（关键）</h4><p>​        通过gzip压缩，能将打好的包压缩到原来的1/3，gzip分为2部分，需要服务器配合</p>
<p>​        先安装 compression-webpack-plugin 插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm  i compression-webpack-plugin -save-dev</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">yarn -D compression-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>​        然后再webpack.prod.conf.js中配置    </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpackConfig.plugins.push(</span><br><span class="line">       <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">           asset: <span class="string">&#x27;[path].gz[query]&#x27;</span>,</span><br><span class="line">           algorithm: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">           test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(</span><br><span class="line">               <span class="string">&#x27;\\.(&#x27;</span> +</span><br><span class="line">               config.build.productionGzipExtensions.join(<span class="string">&#x27;|&#x27;</span>) +</span><br><span class="line">               <span class="string">&#x27;)$&#x27;</span></span><br><span class="line">           ),</span><br><span class="line">           threshold: <span class="number">10240</span>,</span><br><span class="line">           minRatio: <span class="number">0.8</span></span><br><span class="line">       &#125;)</span><br><span class="line">   )</span><br></pre></td></tr></table></figure>

<p>最后在config/index.js中将productionGzip设置为true就可以了</p>
<p><img src="/2021/02/24/%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96/1572916447286.png" alt="config修改"></p>
<p>​    然后到了服务器配置了，我用的node作为服务器运行，因此讲下如何配置node的</p>
<p>​        1.express</p>
<p>​            先安装一个依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install compression --save</span><br></pre></td></tr></table></figure>

<p>​            然后在文件中配置以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> compression = <span class="built_in">require</span>(<span class="string">&#x27;compression&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="comment">// 启用gzip</span></span><br><span class="line">app.use(compression());</span><br></pre></td></tr></table></figure>

<p>​            这样gzip就可以跑起来了</p>
<p>​        2.koa</p>
<p>​            安装koa-compress中间件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install koa-compress --save</span><br></pre></td></tr></table></figure>

<p>​            配置koa-compress中间件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compress = <span class="built_in">require</span>(<span class="string">&#x27;koa-compress&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = koa();</span><br><span class="line"><span class="keyword">const</span> options = &#123; <span class="attr">threshold</span>: <span class="number">2048</span> &#125;;</span><br><span class="line">app.use(compress(options));</span><br></pre></td></tr></table></figure>



<p>至此，vue项目的首屏优化就到这里了，剩余还有的是请求优化等一系列操作了，不过我还没来得及改，就不写了。</p>
<p>最后介绍一个比较好用的测试网站性能的在线网站，可以用于测试网站性能。</p>
<p>GTmetrix:<a href="https://gtmetrix.com/">https://gtmetrix.com/</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>BFC</title>
    <url>/2021/03/08/BFC/</url>
    <content><![CDATA[<h2 id="一、BFC-概念"><a href="#一、BFC-概念" class="headerlink" title="一、BFC 概念"></a>一、BFC 概念</h2><p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>
<p>那么 BFC 是什么呢？</p>
<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。</p>
<p>**具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。<br>**</p>
<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>
<h2 id="二、触发-BFC"><a href="#二、触发-BFC" class="headerlink" title="二、触发 BFC"></a>二、触发 BFC</h2><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>
<ul>
<li>body 根元素</li>
<li>浮动元素：float 除 none 以外的值</li>
<li>绝对定位元素：position (absolute、fixed)</li>
<li>display 为 inline-block、table-cells、flex</li>
<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>
</ul>
<h2 id="三、BFC-特性及应用"><a href="#三、BFC-特性及应用" class="headerlink" title="三、BFC 特性及应用"></a>三、BFC 特性及应用</h2><h3 id="1-同一个-BFC-下外边距会发生折叠"><a href="#1-同一个-BFC-下外边距会发生折叠" class="headerlink" title="1. 同一个 BFC 下外边距会发生折叠"></a><strong>1. 同一个 BFC 下外边距会发生折叠</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">div&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: lightblue;</span><br><span class="line">    margin: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/08/BFC/bfc_1.png"></p>
<p>因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。</p>
<p>注意：这不是css 的bug，而是一种规范，<strong>如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.container &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: lightblue;</span><br><span class="line">    margin: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候，两个盒子边距就变成了 200px</p>
<p><img src="/2021/03/08/BFC/bfc_3.png"></p>
<h3 id="2-BFC-可以包含浮动的元素（清除浮动）"><a href="#2-BFC-可以包含浮动的元素（清除浮动）" class="headerlink" title="2. BFC 可以包含浮动的元素（清除浮动）"></a><strong>2. BFC 可以包含浮动的元素（清除浮动）</strong></h3><p>浮动的元素会脱离普通文档流，导致无法撑开父元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.f_box</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child_box</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;f_box&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child_box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。</p>
<p><img src="/2021/03/08/BFC/image-20210308161026260.png"></p>
<p>如果使触发容器的 BFC，那么容器将会包裹着浮动元素。</p>
<p><img src="/2021/03/08/BFC/image-20210308161210023.png"></p>
<h3 id="3-BFC-可以阻止元素被浮动元素覆盖"><a href="#3-BFC-可以阻止元素被浮动元素覆盖" class="headerlink" title="3. BFC 可以阻止元素被浮动元素覆盖"></a><strong>3. BFC 可以阻止元素被浮动元素覆盖</strong></h3><p>文字环绕效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 100px;float: left;background: lightblue&quot;</span>&gt;</span>我是一个左浮动的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px; height: 200px;background: #eee&quot;</span>&gt;</span>我是一个没有设置浮动, </span><br><span class="line">也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/08/BFC/image-20210308161324157.png"></p>
<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 <strong>overflow: hidden</strong>，就会变成：</p>
<p><img src="/2021/03/08/BFC/image-20210308161521492.png"></p>
<p>原文来源:<a href="https://zhuanlan.zhihu.com/p/25321647">BFC</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件通信</title>
    <url>/2021/03/15/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="prop-emit"><a href="#prop-emit" class="headerlink" title="prop/$emit"></a>prop/$emit</h2><p>父组件：通过<code>prop</code>的方式向子组件传递数据</p>
<p>子组件：通过<code>$emit</code>可以向父组件通信。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    当前选中：&#123;&#123; current &#125;&#125;</span><br><span class="line">    &lt;Child :list=<span class="string">&quot;list&quot;</span> @change=<span class="string">&quot;changeCurrent&quot;</span>&gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      current: <span class="number">0</span>,</span><br><span class="line">      list: [<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;水浒传&quot;</span>, <span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;西游记&quot;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; Child &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeCurrent</span>(<span class="params">num</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//监听子组件传过来的数据</span></span><br><span class="line">      <span class="built_in">this</span>.current = num;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;template v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in list&quot;</span>&gt;</span><br><span class="line">      &lt;div @click=<span class="string">&quot;clickItem(index)&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    list: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">clickItem</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;change&quot;</span>, index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<p>​    传值取值方便简洁明了</p>
<p>缺点：</p>
<ol>
<li>由于数据是单向传递，如果子组件需要改变父组件的props值每次需要给子组件绑定对应的监听事件。</li>
<li>如果父组件需要给孙组件传值，需要子组件进行转发，较为不便。</li>
</ol>
<h2 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a>.sync修饰符</h2><p>在子组件能够直接修改父组件的prop值</p>
<p><code>vue1.x</code> 时，曾作为双向绑定功能存在，即子组件可以修改父组件中的值</p>
<p><code>vue2.0</code>时，违反了单向数据流的设计理念–删除</p>
<p><code>vue2.3.0+</code>是，重新引入，作为一个编译时的语法糖存在—它会被扩展为一个自动更新父组件属性的<code>v-on</code>监听器。说白了就是手动进行更新父组件中的值了，从而使数据改动来源更加的明显。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Child :msg.sync=<span class="string">&quot;msg&quot;</span> :num.sync=<span class="string">&quot;num&quot;</span>&gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;way2&quot;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&quot;hello every guys&quot;</span>,</span><br><span class="line">      num: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在Child组件传值时给每个值添加一个.sync修饰，在编译时会被扩展为如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Child :msg=<span class="string">&quot;msg&quot;</span> @update.msg=<span class="string">&quot;val =&gt; msg = val&quot;</span> :num.sync=<span class="string">&quot;num&quot;</span> @update.num=<span class="string">&quot;val =&gt; num = val&quot;</span>&gt;&lt;/Child&gt;</span><br></pre></td></tr></table></figure>

<p>因此子组件中只需要显示的触发update的更新事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div @click=<span class="string">&quot;clickRevert&quot;</span>&gt;点击更新字符串：&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;当前值：&#123;&#123; num &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div @click=<span class="string">&quot;clickOpt(&#x27;add&#x27;)&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;opt&quot;</span>&gt;+&lt;/div&gt;</span><br><span class="line">    &lt;div @click=<span class="string">&quot;clickOpt(&#x27;sub&#x27;)&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;opt&quot;</span>&gt;-&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    num: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">clickRevert</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; msg &#125; = <span class="built_in">this</span>;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;update:msg&quot;</span>,msg.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">clickOpt</span>(<span class="params">type = <span class="string">&quot;&quot;</span></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; num &#125; = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (type == <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">        num++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        num--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&quot;update:num&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>和<code>v-model</code>同理，v-model本质上也是一种语法糖，只不过它触发的不是update方法而是input方法；而且v-model没有.sync来的更加灵活，v-model只能绑定一个值</p>
<h2 id="attrs和-listeners"><a href="#attrs和-listeners" class="headerlink" title="$attrs和$listeners"></a>$attrs和$listeners</h2><p>当从A到C的跨级通信时，prop传值会非常麻烦，会有很多冗余繁琐的转发操作；如果C中的状态改变还需要传递给A，使用事件还需要一级一级的向上传递，代码可读性就更差了。</p>
<p><img src="/2021/03/15/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/attrs.jpg"></p>
<p>解决方案 ：<code>vue2.4+</code>版本提供了新的方案：<code>$attrs和$listeners</code>，</p>
<blockquote>
<p>`$attrs：包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Child</span><br><span class="line">      :notUse=<span class="string">&quot;&#x27;not-use&#x27;&quot;</span> <span class="comment">// 没用的信息</span></span><br><span class="line">      :childMsg=<span class="string">&quot;childMsg&quot;</span>  <span class="comment">// 传给子组件的信息</span></span><br><span class="line">      :grandChildMsg=<span class="string">&quot;grandChildMsg&quot;</span>  <span class="comment">//传给孙组件的信息</span></span><br><span class="line">      @onChildMsg=<span class="string">&quot;onChildMsg&quot;</span>  <span class="comment">// 子组件function</span></span><br><span class="line">      @onGrandChildMsg=<span class="string">&quot;onGrandChildMsg&quot;</span>  <span class="comment">//孙组件function</span></span><br><span class="line">    &gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      childMsg: <span class="string">&quot;hello child&quot;</span>,</span><br><span class="line">      grandChildMsg: <span class="string">&quot;hello grand child&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; Child &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">onChildMsg</span>(<span class="params">msg</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.childMsg = msg;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onGrandChildMsg</span>(<span class="params">msg</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.grandChildMsg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;div @click=<span class="string">&quot;clickMsg&quot;</span>&gt;&#123;&#123; childMsg &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;$attrs: &#123;&#123; $attrs &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;GrandChild v-bind=<span class="string">&quot;$attrs&quot;</span> v-on=<span class="string">&quot;$listeners&quot;</span>&gt;&lt;/GrandChild&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> GrandChild <span class="keyword">from</span> <span class="string">&quot;./grand-child&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    childMsg: &#123;</span><br><span class="line">      type: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">clickMsg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; childMsg &#125; = <span class="built_in">this</span>;</span><br><span class="line">      <span class="built_in">this</span>.$emit(</span><br><span class="line">          <span class="string">&quot;onChildMsg&quot;</span>,</span><br><span class="line">          childMsg.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; GrandChild &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在子组件中，通过props获取子组件所需要的参数，即childMsg；</p>
<p>剩余的参数就被归到了<code>$attrs</code>对象中，然后把它继续往孙组件中传；同时把所有的监听函数归到$listeners，也继续往下传。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//grand-child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box1&quot;</span> @click=<span class="string">&quot;clickMsg&quot;</span>&gt;grand-child:&#123;&#123; grandChildMsg &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    grandChildMsg: &#123;</span><br><span class="line">      type: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">clickMsg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; grandChildMsg &#125; = <span class="built_in">this</span>;</span><br><span class="line">      <span class="built_in">this</span>.$emit(</span><br><span class="line">        <span class="string">&quot;onGrandChildMsg&quot;</span>,</span><br><span class="line">        grandChildMsg.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>总结：$attrs和$listeners很好的解决了<code>跨一级</code>组件传值的问题。但是不适合做多级组件的传值问题</p>
<h2 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h2><p>用来做多级组件数据的传值</p>
<p>provide/inject是<code>vue2.2+</code>版本新增的属性，简单来说就是父组件中通过provide来提供变量, 然后再子组件中通过inject来注入变量。这里inject注入的变量不像<code>$attrs</code>，只能向下一层；inject不论子组件嵌套有多深，都能获取到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Child&gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123; Child &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      childmsg: <span class="string">&quot;hello child&quot;</span>,</span><br><span class="line">      grandmsg: <span class="string">&quot;hello grand child&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//提供变量</span></span><br><span class="line">  <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      childmsg: <span class="built_in">this</span>.childmsg,</span><br><span class="line">      grandmsg: <span class="built_in">this</span>.grandmsg</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.childmsg = <span class="string">&quot;hello new child&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>.grandmsg = <span class="string">&quot;hello new grand child&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;child-msg:&#123;&#123; childmsg &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;grand-msg:&#123;&#123; grandmsg &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;GrandChild&gt;&lt;/GrandChild&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> GrandChild <span class="keyword">from</span> <span class="string">&quot;./grand-child&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inject: [<span class="string">&quot;childmsg&quot;</span>, <span class="string">&quot;grandmsg&quot;</span>],</span><br><span class="line">  components: &#123; GrandChild &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//grand-child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;child-msg:&#123;&#123; childmsg &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;grand-msg:&#123;&#123; grandmsg &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;GrandChild&quot;</span>,</span><br><span class="line">  inject: [<span class="string">&quot;childmsg&quot;</span>, <span class="string">&quot;grandmsg&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<p>​    1.一旦子组件注入了某个数据，在data中就不能再声明这个数据了</p>
<p>​    2.<code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的</p>
<h2 id="EventBus-—兄弟间组件通行"><a href="#EventBus-—兄弟间组件通行" class="headerlink" title="EventBus —兄弟间组件通行"></a>EventBus —兄弟间组件通行</h2><p>实际上是创建一个vue实例，通过一个空的vue实例作为桥梁实现vue组件间的通信。它是实现非父子组件通信的一种解决方案，所有的组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的“灾难”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//utils/event-bus.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure>

<p>首先创造一个空的vue对象并将其导出，他是一个不具备<code>DOM</code>的组件，它具有的仅仅只是它实例方法而已，因此它非常的轻便。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&quot;@/utils/event-bus&quot;</span>;</span><br><span class="line">Vue.prototype.$bus = bus;</span><br></pre></td></tr></table></figure>

<p>将其挂载到全局，变成全局的事件总线，这样在组件中就能很方便的调用了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;Child1&gt;&lt;/Child1&gt;</span><br><span class="line">    &lt;Child2&gt;&lt;/Child2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child1 <span class="keyword">from</span> <span class="string">&quot;./child1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Child2 <span class="keyword">from</span> <span class="string">&quot;./child2&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child1,</span><br><span class="line">    Child2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>实现兄弟组件间的通信</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child1.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;send&quot;</span> @click=<span class="string">&quot;clickSend&quot;</span>&gt;发送消息&lt;/div&gt;</span><br><span class="line">    &lt;template v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in msgList&quot;</span>&gt;</span><br><span class="line">      &lt;div :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">msgList</span>: [] &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$bus.$on(<span class="string">&quot;getMsg1&quot;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.msgList.push(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">clickSend</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$bus.$emit(<span class="string">&quot;getMsg2&quot;</span>, <span class="string">&quot;hello from1:&quot;</span> + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//child2.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;send&quot;</span> @click=<span class="string">&quot;clickSend&quot;</span>&gt;发送消息&lt;/div&gt;</span><br><span class="line">    &lt;template v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in msgList&quot;</span>&gt;</span><br><span class="line">      &lt;div :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">msgList</span>: [] &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$bus.$on(<span class="string">&quot;getMsg2&quot;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.msgList.push(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">clickSend</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$bus.$emit(<span class="string">&quot;getMsg1&quot;</span>, <span class="string">&quot;hello from2:&quot;</span> + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果使用不善，EventBus会是一种灾难，到底是什么样的“灾难”了？大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，EventBus在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理EventBus在项目中的关系。通常会用到，在页面或组件销毁时，同时移除EventBus事件监听。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $EventBus.$off(<span class="string">&#x27;event-name&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：EventBus可以用来很方便的实现兄弟组件和跨级组件的通信，但是使用不当时也会带来很多问题；所以适合逻辑并不复杂的小页面，逻辑复杂时还是建议使用vuex。</p>
<p>原文来源：<a href="https://zhuanlan.zhihu.com/p/119350263">Vue中组件通信的方式</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue面试题</title>
    <url>/2021/03/15/Vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="vue、react、angular三者有什么区别？"><a href="#vue、react、angular三者有什么区别？" class="headerlink" title="vue、react、angular三者有什么区别？"></a>vue、react、angular三者有什么区别？</h1><p>vue.js通过简单的API（应用程序编程接口）提供高效的数据绑定和灵活的组件系统。</p>
<p>Vue.js的特性如下：</p>
<p>1.轻量级的框架</p>
<p>2.双向数据绑定</p>
<p>3.指令</p>
<p>4.插件化</p>
<h2 id="1、与AngularJS的区别"><a href="#1、与AngularJS的区别" class="headerlink" title="1、与AngularJS的区别"></a><strong>1、与AngularJS的区别</strong></h2><p>特点：</p>
<p>1.良好的应用程序结构</p>
<p>2.双向数据绑定</p>
<p>3.指令</p>
<p>4.HTML模板</p>
<p>5.可嵌入、注入和测试</p>
<h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><p>1.都支持指令：内置指令和自定义指令。</p>
<p>2.都支持过滤器：内置过滤器和自定义过滤器。</p>
<p>3.都支持双向数据绑定。</p>
<p>4.都不支持低端浏览器。</p>
<h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><p>1.AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观。</p>
<p>2.在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢。</p>
<p>Vue.js使用基于依赖追踪的观察并且使用异步队列更新。所有的数据都是独立触发的。</p>
<p>对于庞大的应用来说，这个优化差异还是比较明显的。</p>
<h2 id="2、与React的区别"><a href="#2、与React的区别" class="headerlink" title="2、与React的区别"></a><strong>2、与React的区别</strong></h2><h3 id="相同点：-1"><a href="#相同点：-1" class="headerlink" title="相同点："></a>相同点：</h3><p>1.React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用。</p>
<p>2.中心思想相同：一切都是组件，组件实例之间可以嵌套。</p>
<p>3.都提供合理的钩子函数，可以让开发者定制化地去处理需求。</p>
<p>4.都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载。</p>
<p>5.在组件开发中都支持mixins的特性。</p>
<h3 id="不同点：-1"><a href="#不同点：-1" class="headerlink" title="不同点："></a>不同点：</h3><p>React依赖Virtual DOM,而Vue.js使用的是DOM模板。React采用的Virtual DOM会对渲染出来的结果做脏检查。</p>
<p>Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作DOM。</p>
<h1 id="vue-的认识与介绍"><a href="#vue-的认识与介绍" class="headerlink" title="vue 的认识与介绍"></a>vue 的认识与介绍</h1><h2 id="1、渐进式框架Vue"><a href="#1、渐进式框架Vue" class="headerlink" title="1、渐进式框架Vue"></a><strong>1、渐进式框架Vue</strong></h2><p>Vue.js 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。</p>
<p>渐进式 – 阶梯式向前，vue是轻量级的，它有很多独立的功能或库，能根据不同的需求使用不同的功能</p>
<p>渐进式表现：声明式渲染——组件系统——客户端路由——-大数据状态管理——-构建工具</p>
<h2 id="2、vue中两个核心点"><a href="#2、vue中两个核心点" class="headerlink" title="2、vue中两个核心点"></a><strong>2、vue中两个核心点</strong></h2><h3 id="1）响应式数据绑定"><a href="#1）响应式数据绑定" class="headerlink" title="1）响应式数据绑定"></a>1）响应式数据绑定</h3><p>当数据发生变化是，vue自动更新视图</p>
<p>原理：</p>
<p>​    Vue2.0:利用了 Object.definedProperty 中的setter/getter 代理数据，监控对数据的操作。</p>
<p>​    Vue3.0:直接采用了Proxy来监听数据的变化</p>
<h3 id="2）组合的视图组件"><a href="#2）组合的视图组件" class="headerlink" title="2）组合的视图组件"></a>2）组合的视图组件</h3><p>ui页面映射为组件书</p>
<p>划分组件可维护、可重用、可测试</p>
<h2 id="3、虚拟DOM"><a href="#3、虚拟DOM" class="headerlink" title="3、虚拟DOM"></a><strong>3、虚拟DOM</strong></h2><p>大量的Dom操作会导致页面加载十分缓慢，通常在数据变化的时候，JS会通过处理DOM来更新视图数据，但是在更新页面后会导致页面重新渲染，这样的结果就是无需修改数据的地方也会重新渲染DOM节点。这样性能方面就会很受影响。</p>
<p>虚拟DOM–利用在内存中生成与真实DOM与之对应的数据结构，这个在内存中生成的结构称之为虚拟DOM。</p>
<p>当数据发生变化时，能够智能的计算出重新渲染组件的最小代价并应用到DOM操作上 （相关知识点 diff算法）</p>
<h2 id="4、MVVM-MVC-MVP-之前的区别"><a href="#4、MVVM-MVC-MVP-之前的区别" class="headerlink" title="4、MVVM MVC MVP 之前的区别"></a><strong>4、MVVM MVC MVP 之前的区别</strong></h2><h3 id="1）-MVC"><a href="#1）-MVC" class="headerlink" title="1） MVC"></a>1） MVC</h3><p>MVC模式的意思是，软件可以分成三个部分。</p>
<ul>
<li>视图（View）：用户界面。</li>
<li>控制器（Controller）：业务逻辑</li>
<li>模型（Model）：数据保存</li>
</ul>
<p>通信方式：</p>
<p>​    <img src="/2021/03/15/Vue%E9%9D%A2%E8%AF%95%E9%A2%98/MVC.png" alt="MVC模式"></p>
<ol>
<li>View 传送指令到 Controller</li>
<li>Controller 完成业务逻辑后，要求 Model 改变状态</li>
<li>Model 将新的数据发送到 View，用户得到反馈</li>
</ol>
<p>所有通信都是单向的</p>
<p>互动模式：</p>
<p>（1）通过 View 接受指令，传递给 Controller。</p>
<p>（2）直接通过controller接受指令。</p>
<h3 id="2）MVP"><a href="#2）MVP" class="headerlink" title="2）MVP"></a>2）MVP</h3><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。</p>
<p><img src="/2021/03/15/Vue%E9%9D%A2%E8%AF%95%E9%A2%98/MVP.png" alt="MVP模式"></p>
<ul>
<li>各部分之间的通信，都是双向的。</li>
<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>
<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>
</ul>
<h3 id="3）MVVM"><a href="#3）MVVM" class="headerlink" title="3）MVVM"></a>3）MVVM</h3><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p>
<p>M： model （数据层，也就是指数据（前端是js））</p>
<p>V：view ( 也就是指DOM层 或用户界面 )</p>
<p>VM : view-model (处理数据和界面的中间层)</p>
<p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然</p>
<p>Vue 采用的就是这种模式</p>
<h2 id="5、vue是如何实现响应式数据的呢？（响应式数据原理）"><a href="#5、vue是如何实现响应式数据的呢？（响应式数据原理）" class="headerlink" title="5、vue是如何实现响应式数据的呢？（响应式数据原理）"></a>5、vue是如何实现响应式数据的呢？（响应式数据原理）</h2><h3 id="VUE-2-0"><a href="#VUE-2-0" class="headerlink" title="VUE 2.0"></a>VUE 2.0</h3><p>通过<code>Object.defineProperty</code>重新定义data中所有的属性，简单来说就是通过遍历所有data的数据，并设置其setting和geting属性来实现监听数据的变化</p>
<p>但是这种方式具有极大的局限性，由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。</p>
<ul>
<li>对于对象 无法监听对象的删除和添加</li>
<li>对于数组 利用索引直接设置一个数组项以及修改数组的长度时无法检测到数组的变化</li>
</ul>
<p>不止如此，Object.defineProperty通过遍历所有的属性，当数据量一大起来，加载速度就无比的慢。</p>
<p>还有，由于Object.defineProperty是监听所有属性的变化，那么如果数据量巨大的话，所占的内存也会无比的多</p>
<h3 id="VUE-3-0"><a href="#VUE-3-0" class="headerlink" title="VUE 3.0"></a>VUE 3.0</h3><p><strong>Proxy</strong> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p>
<p>也就是无论访问对象的什么属性，之前定义的或是新增的属性，都会走到拦截中进行处理。这就解决了之前所无法监听的问题</p>
<p>详细的对比:<a href="E:\随手笔记\Vue\vue响应式原理v2.0与v3.0的区别.md">vue响应式原理v2.0与v3.0的区别</a></p>
<h2 id="6、Vue的事件绑定原理"><a href="#6、Vue的事件绑定原理" class="headerlink" title="6、Vue的事件绑定原理"></a>6、Vue的事件绑定原理</h2><p><code>Vue</code>中通过<code>v-on</code>或其语法糖<code>@</code>指令来给元素绑定事件并且提供了事件修饰符，基本流程是进行模板编译生成<code>AST(语法书)</code>，生成<code>render</code>函数后并执行得到<code>VNode</code>，<code>VNode</code>生成真实<code>DOM</code>节点或者组件时候使用<code>addEventListener</code>方法进行事件绑定。</p>
<p>额外的知识：</p>
<p>修饰符</p>
<blockquote>
<ul>
<li><code>.stop</code>: 调用<code>event.stopPropagation()</code>，即阻止事件冒泡。</li>
<li><code>.prevent</code>: 调用<code>event.preventDefault()</code>，即阻止默认事件。</li>
<li><code>.capture</code>: 添加事件侦听器时使用<code>capture</code>模式，即使用事件捕获模式处理事件。</li>
<li><code>.self</code>: 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>
<li><code>.&#123;keyCode | keyAlias&#125;</code>: 只当事件是从特定键触发时才触发回调。</li>
<li><code>.native</code>: 监听组件根元素的原生事件，即注册组件根元素的原生事件而不是组件自定义事件的。</li>
<li><code>.once</code>: 只触发一次回调。</li>
<li><code>.left(2.2.0)</code>: 只当点击鼠标左键时触发。</li>
<li><code>.right(2.2.0)</code>: 只当点击鼠标右键时触发。</li>
<li><code>.middle(2.2.0)</code>: 只当点击鼠标中键时触发。</li>
<li><code>.passive(2.3.0)</code>: 以<code>&#123; passive: true &#125;</code>模式添加侦听器，表示<code>listener</code>永远不会调用<code>preventDefault()</code>。</li>
</ul>
</blockquote>
<h2 id="7、v-model中的实现原理及如何自定义v-model"><a href="#7、v-model中的实现原理及如何自定义v-model" class="headerlink" title="7、v-model中的实现原理及如何自定义v-model"></a>7、v-model中的实现原理及如何自定义v-model</h2><h3 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;sth&quot;</span> /&gt;</span></span><br><span class="line">//  等同于</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;sth&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;sth = $event.target.value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>也就是说， v-model=”sth” 是 :value=”sth” @input=”sth = $event.target.value” 的缩写。</p>
<p><code>v-model</code> 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 <code>value</code> 属性和 <code>input</code> 事件；</li>
<li>checkbox 和 radio 使用 <code>checked</code> 属性和 <code>change</code> 事件；</li>
<li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件</li>
</ul>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><ul>
<li>v-model只不过是一个语法糖而已,真正的实现靠的还是<ul>
<li>v-bind:绑定响应式数据</li>
<li>触发oninput 事件并传递数据</li>
</ul>
</li>
</ul>
<h3 id="自定义组件实现v-model"><a href="#自定义组件实现v-model" class="headerlink" title="自定义组件实现v-model"></a>自定义组件实现v-model</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">//  拆解如下</span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:value</span>=<span class="string">&quot;price&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;price = $event.target.value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//  根据这个我们可以在子组件中，进行拼凑value属性，input方法。</span><br><span class="line">Vue.component(&#x27;my-component&#x27;, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        :value=&quot;value&quot;</span><br><span class="line">        @input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  `,</span><br><span class="line">  props: [&#x27;value&#x27;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="8、为什么Vue采用异步渲染呢"><a href="#8、为什么Vue采用异步渲染呢" class="headerlink" title="8、为什么Vue采用异步渲染呢"></a>8、为什么Vue采用异步渲染呢</h2><p>根本原因：为了性能</p>
<p><code>Vue</code> 是组件级更新，如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染，所以为了性能，<code> Vue</code> 会在本轮数据更新后，在异步更新视图</p>
<p>流程：</p>
<p>数据变化后会调用<code>notify</code>方法，将<code>watcher</code>遍历，调用<code>update</code>方法通知<code>watcher</code>进行更新，这时候<code>watcher</code>并不会立即去执行，在<code>update</code>中会调用<code>queueWatcher</code>方法将<code>watcher</code>放到了一个队列里，在<code>queueWatcher</code>会根据<code>watcher</code>的进行去重，若多个属性依赖一个<code>watcher</code>，则如果队列中没有该<code>watcher</code>就会将该<code>watcher</code>添加到队列中，然后便会在<code>$nextTick</code>方法的执行队列中加入一个<code>flushSchedulerQueue</code>方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将<code>$nextTick</code>方法的回调加入<code>$nextTick</code>方法中维护的执行队列，<code>flushSchedulerQueue</code>中开始会触发一个<code>before</code>的方法，其实就是<code>beforeUpdate</code>，然后<code>watcher.run</code>()才开始真正执行<code>watcher</code>，执行完页面就渲染完成，更新完成后会调用<code>updated</code>钩子。</p>
<p>数据更新 –&gt;调用<code>notify </code>,遍历<code>watcher</code>–&gt; <code>uplate</code>调用<code>queueWatcher</code>将<code>watcher</code>方静队列中 – &gt;<code>watcher</code>去重 –&gt;<code>$nextTick</code>执行队列中添加<code>flushSchedulerQueue</code>–&gt;触发<code>beforeUpdate</code> –&gt;<code>watcher.run()</code> 开始执行<code>watcher</code> –&gt;渲染完成–&gt;调用<code>update</code></p>
<h2 id="9、了解nextTick吗"><a href="#9、了解nextTick吗" class="headerlink" title="9、了解nextTick吗"></a>9、了解nextTick吗</h2><p>假如此时我们有一个需求，需要在页面渲染完成后取得页面的<code>DOM</code>元素，而由于渲染是异步的，我们不能直接在定义的方法中同步取得这个值的，于是就有了<code>vm.$nextTick</code>方法，<code>Vue</code>中<code>$nextTick</code>方法将回调延迟到下次<code>DOM</code>更新循环之后执行，也就是在下次<code>DOM</code>更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，能够获取更新后的<code>DOM</code>。</p>
<p>简单来说就是当数据更新时，在<code>DOM</code>中渲染完成后，执行回调函数。<br>通过一个简单的例子来演示<code>$nextTick</code>方法的作用，首先需要知道<code>Vue</code>在更新<code>DOM</code>时是异步执行的，也就是说在更新数据时其不会阻塞代码的执行，直到执行栈中代码执行结束之后，才开始执行异步任务队列的代码，所以在数据更新时，组件不会立即渲染，此时在获取到<code>DOM</code>结构后取得的值依然是旧的值，而在<code>$nextTick</code>方法中设定的回调函数会在组件渲染完成之后执行，取得<code>DOM</code>结构后取得的值便是新的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">&#x27;Vue&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;msgElement&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateMsg&quot;</span>&gt;</span>updateMsg<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            updateMsg: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.msg = <span class="string">&quot;Update&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;DOM未更新：&quot;</span>, <span class="built_in">this</span>.$refs.msgElement.innerHTML)  <span class="comment">// Vue</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;DOM已更新：&quot;</span>, <span class="built_in">this</span>.$refs.msgElement.innerHTML) <span class="comment">//Update</span></span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里涉及到了事件循环（<code>Event Loop</code>）的知识点</p>
<ul>
<li>执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。</li>
<li>后台线程就是浏览器实现对于<code>setTimeout</code>、<code>setInterval</code>、<code>XMLHttpRequest</code>等等的执行线程。</li>
<li>宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate(Node)</code>、<code>requestAnimationFrame</code>、<code>UI rendering</code>、<code>I/O</code>等操作。</li>
<li>微队列，另一些<code>异步任务的回调(重点：是异步任务的回调，并不是异步任务会进入微队列)</code>会依次进入微队列，等待后续调用，包括<code>Promise</code>、<code>process.nextTick(Node)</code>、<code>Object.observe</code>、<code>MutationObserver</code>等操作。</li>
</ul>
<p>当<code>Js</code>执行时，进行如下流程:</p>
<ol>
<li>首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中。</li>
<li>执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列。</li>
<li>取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作。</li>
<li>当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕。</li>
<li>最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行。</li>
<li>不断往复<code>...</code>。</li>
</ol>
<p>了解异步任务的执行队列后，回到中<code>$nextTick</code>方法，当用户数据更新时，<code>Vue</code>将会维护一个缓冲队列，对于所有的更新数据将要进行的组件渲染与<code>DOM</code>操作进行一定的策略处理后加入缓冲队列，然后便会在<code>$nextTick</code>方法的执行队列中加入一个<code>flushSchedulerQueue</code>方法(这个方法将会触发在缓冲队列的所有回调的执行)，然后将<code>$nextTick</code>方法的回调加入<code>$nextTick</code>方法中维护的执行队列，在异步挂载的执行队列触发时就会首先会首先执行<code>flushSchedulerQueue</code>方法来处理<code>DOM</code>渲染的任务，然后再去执行<code>$nextTick</code>方法构建的任务，这样就可以实现在<code>$nextTick</code>方法中取得已渲染完成的<code>DOM</code>结构。</p>
<p>知识点：<a href="E:\随手笔记\事件循环.md">事件循环</a></p>
<h2 id="10、Vue的生命周期"><a href="#10、Vue的生命周期" class="headerlink" title="10、Vue的生命周期"></a>10、Vue的生命周期</h2><h3 id="什么时候被调用"><a href="#什么时候被调用" class="headerlink" title="什么时候被调用"></a><strong>什么时候被调用</strong></h3><ul>
<li>beforeCreate ：实例初始化之后，数据观测之前调用</li>
<li>created：实例创建完之后调用。实例完成：数据观测、属性和方法的运算、<code> watch/event</code> 事件回调。无<code> $el</code> .</li>
<li>beforeMount：挂在开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意此时还没有挂在html到页面上</li>
<li>mounted：挂在完成，也就是模板中的HTML渲染到HTML页面中，此时一般可以做一些ajax操作，mounted只会执行一次。。</li>
<li>beforeUpdate：数据更新前调用，发生在虚拟DOM重新渲染和打补丁，在这之后会调用改钩子。</li>
<li>updated：由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用改钩子。</li>
<li>beforeDestroy：实例销毁前调用，实例仍然可用。</li>
<li>destroyed：实例销毁之后调用，调用后，Vue实例指示的所有东西都会解绑，所有事件监听器和所有子实例都会被移除</li>
</ul>
<h3 id="每个生命周期内部可以做什么？"><a href="#每个生命周期内部可以做什么？" class="headerlink" title="每个生命周期内部可以做什么？"></a><strong>每个生命周期内部可以做什么？</strong></h3><ul>
<li>created：实例已经创建完成，因为他是最早触发的，所以可以进行一些数据、资源的请求。</li>
<li>mounted：实例已经挂载完成，可以进行一些DOM操作。</li>
<li>beforeUpdate：可以在这个钩子中进一步的更改状态，不会触发重渲染。</li>
<li>updated：可以执行依赖于DOM的操作，但是要避免更改状态，可能会导致更新无线循环。</li>
<li>destroyed：可以执行一些优化操作，清空计时器，解除绑定事件。</li>
</ul>
<h3 id="ajax放在哪个生命周期？"><a href="#ajax放在哪个生命周期？" class="headerlink" title="ajax放在哪个生命周期？"></a><strong>ajax放在哪个生命周期？</strong></h3><p>一般放在<code> mounted</code> 中，保证逻辑统一性，因为生命周期是同步执行的，<code> ajax</code> 是异步执行的。单数服务端渲染<code> ssr</code> 同一放在<code> created</code> 中，因为服务端渲染不支持<code> mounted</code> 方法。</p>
<h3 id="什么时候使用beforeDestroy？"><a href="#什么时候使用beforeDestroy？" class="headerlink" title="什么时候使用beforeDestroy？"></a><strong>什么时候使用beforeDestroy？</strong></h3><p>当前页面使用<code> $on</code> ，需要解绑事件。清楚定时器。解除事件绑定，<code> scroll mousemove</code> 。</p>
<h2 id="11、父子组件生命周期调用顺序"><a href="#11、父子组件生命周期调用顺序" class="headerlink" title="11、父子组件生命周期调用顺序"></a>11、父子组件生命周期调用顺序</h2><p>渲染顺序：先父后子，完成顺序：先子后父</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</span><br></pre></td></tr></table></figure>

<p>更新顺序：父更新导致子更新，子更新完成后父</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</span><br></pre></td></tr></table></figure>

<p>销毁顺序：先父后子，完成顺序：先子后父</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</span><br></pre></td></tr></table></figure>



<h2 id="12、Vue组件通信"><a href="#12、Vue组件通信" class="headerlink" title="12、Vue组件通信"></a>12、Vue组件通信</h2><h3 id="1-prop-emit"><a href="#1-prop-emit" class="headerlink" title="1.prop/$emit"></a>1.prop/$emit</h3><p>父组件：通过<code>prop</code>的方式向子组件传递数据</p>
<p>子组件：通过<code>$emit</code>可以向父组件通信。</p>
<p>优点：</p>
<p>​    传值取值方便简洁明了</p>
<p>缺点：</p>
<ol>
<li>由于数据是单向传递，如果子组件需要改变父组件的props值每次需要给子组件绑定对应的监听事件。</li>
<li>如果父组件需要给孙组件传值，需要子组件进行转发，较为不便。</li>
</ol>
<h3 id="2-parent-children"><a href="#2-parent-children" class="headerlink" title="2.$parent/$children"></a>2.$parent/$children</h3><p>在子组件中通过<code>$parent</code>调用了父组件的函数，并在父组件通过<code>$children</code>获取子组件实例的数组</p>
<h3 id="3-provide-inject"><a href="#3-provide-inject" class="headerlink" title="3.provide/inject"></a>3.provide/inject</h3><p>父组件中通过provide来提供变量, 然后再子组件中通过inject来注入变量。这里inject注入的变量不像<code>$attrs</code>，只能向下一层；inject不论子组件嵌套有多深，都能获取到。</p>
<h3 id="4-attrs-listeners"><a href="#4-attrs-listeners" class="headerlink" title="4.$attrs/$listeners"></a>4.$attrs/$listeners</h3><p>跨一级传输数据</p>
<h3 id="5-vuex"><a href="#5-vuex" class="headerlink" title="5.vuex"></a>5.vuex</h3><p>vuex实现了单向的数据流，在全局定义了一个State对象用来存储数据，当组件要修改State中的数据时，必须通过Mutation进行操作。</p>
<h3 id="6-refs"><a href="#6-refs" class="headerlink" title="6.$refs"></a>6.$refs</h3><p>用在子组件上，获取的就是组件的实例对象。获取组件实例，调用组件的属性、方法</p>
<h3 id="7-Event-Bus"><a href="#7-Event-Bus" class="headerlink" title="7.Event Bus"></a>7.Event Bus</h3><p>跨组件通信<code> Event Bus</code> （Vue.prototype.bus = new Vue）其实基于<em>b<strong>u</strong>s</em>=<em>n<strong>e</strong>w<strong>V</strong>u**e</em>）其实基于on与$emit</p>
<h3 id="常见使用场景分为以下三类"><a href="#常见使用场景分为以下三类" class="headerlink" title="常见使用场景分为以下三类:"></a>常见使用场景分为以下三类:</h3><ul>
<li>父子组件通信: props; $parent/$children; provide/inject; $ref; $attrs/$listeners</li>
<li>兄弟组件通信: EventBus; Vuex</li>
<li>跨级通信: EventBus; Vuex; provide/inject; $attrs/$listeners</li>
</ul>
<p>详细：<a href="E:\随手笔记\Vue\vue组件通信.md">vue组件通信</a></p>
<h2 id="13-Vuex-工作原理"><a href="#13-Vuex-工作原理" class="headerlink" title="13.Vuex 工作原理"></a>13.Vuex 工作原理</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p>
<p>状态自管理应用包含以下几个部分：</p>
<ul>
<li><p>state，驱动应用的数据源；</p>
</li>
<li><p>view，以声明方式将 state 映射到视图；</p>
</li>
<li><p>actions，响应在 view 上的用户输入导致的状态变化。下图单向数据流示意图：</p>
<img src="/2021/03/15/Vue%E9%9D%A2%E8%AF%95%E9%A2%98/flow.png" alt="flow" style="zoom:30%;">

<p>vuex，多组件共享状态，因-单向数据流简洁性很容易被破坏：</p>
<ul>
<li>多个视图依赖于同一状态。</li>
<li>来自不同视图的行为需要变更同一状态。</li>
</ul>
<p><img src="/2021/03/15/Vue%E9%9D%A2%E8%AF%95%E9%A2%98/vuex.png" alt="vuex"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
